name: Update API specs


on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  API_SPECS_BRANCH: apispecs

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Delete existing API specs branch (local and remote)
        run: |
          git fetch origin
          git branch -D $API_SPECS_BRANCH || true
          if git ls-remote --exit-code --heads origin $API_SPECS_BRANCH; then
            git push origin --delete $API_SPECS_BRANCH
          fi

  update-api-specs:
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      no_changes: ${{ steps.git-status.outputs.no_changes }}
      commit_sha: ${{ steps.commit.outputs.commit_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet jq

      - name: Fetch API Specs from qlik.dev
        run: |
          set -euo pipefail
          # Clean up existing specs to start fresh
          rm -rf specs
          mkdir -p specs

          sitemap_index_url="https://qlik.dev/sitemap-index.xml"
          echo "Fetching sitemap index from: $sitemap_index_url"

          sitemap_urls=$(curl -s "$sitemap_index_url" | \
            xmlstarlet sel -N ns="http://www.sitemaps.org/schemas/sitemap/0.9" \
            -t -m "//ns:sitemap/ns:loc" -v . -n)

          if [[ -z "$sitemap_urls" ]]; then
            echo "Error: No sitemaps found"
            exit 1
          fi

          declare -A downloaded_specs

          for sitemap in $sitemap_urls; do
            echo "Processing sitemap: $sitemap"
            api_urls=$(curl -s "$sitemap" | \
              xmlstarlet sel -N ns="http://www.sitemaps.org/schemas/sitemap/0.9" \
              -t -m "//ns:url/ns:loc" -v . -n | grep '^https://qlik.dev/apis/rest/')
            
            if [[ -z "$api_urls" ]]; then
              echo "Warning: No API URLs found in $sitemap"
              continue
            fi
            
            for url in $api_urls; do
              api_name=$(echo "$url" | sed -E 's|.*/([^/]+)/?$|\1|')
              
              [[ "$api_name" == "rate-limiting" || "$api_name" == "pagination-sorting-filtering" || "$api_name" == "rest" ]] && continue
              
              echo "Processing API: $api_name"
              spec_url="https://qlik.dev/specs/rest/$api_name.json"
              echo "Processing API URL: $spec_url"
              response_code=$(curl -s -o "specs/$api_name.json" -w "%{http_code}" "$spec_url")
              downloaded_specs["$api_name.json"]=1
              
              if [[ "$response_code" == "200" ]]; then
                echo "‚úÖ $spec_url found (HTTP $response_code)"
              else
                echo "‚ùå $spec_url not found (HTTP $response_code)"
                rm -f "specs/$api_name.json"
              fi
            done
          done

          shopt -s dotglob
          for file in specs/*; do
            filename=$(basename "$file")
            if [[ -z "${downloaded_specs[$filename]:-}" ]]; then
              echo "Removing outdated spec: $filename"
              rm -f "specs/$filename"
            fi
          done
          shopt -u dotglob

      - name: List specs directory contents
        run: |
          echo "Listing contents of specs directory:"
          ls -la specs

      - name: Check for changes against main
        id: git-status
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add specs
          if git diff --cached --quiet origin/main -- specs/; then
            echo "No changes detected compared to main"
            echo "no_changes=true" >> $GITHUB_ENV
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "Changes detected compared to main"
            echo "no_changes=false" >> $GITHUB_ENV
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Capture spec file changes
        if: ${{ env.no_changes == 'false' }}
        id: file-changes
        run: |
          echo "## API Spec Changes" > changes.md

          added=$(git diff --name-status origin/main -- specs/ | grep '^A' | cut -f2-)
          modified=$(git diff --name-status origin/main -- specs/ | grep '^M' | cut -f2-)
          deleted=$(git diff --name-status origin/main -- specs/ | grep '^D' | cut -f2-)

          if [[ -n "$added" ]]; then
            echo -e "\n### Added" >> changes.md
            echo "$added" | sed 's|^|‚Ä¢ |' >> changes.md
          fi

          if [[ -n "$modified" ]]; then
            echo -e "\n### Modified" >> changes.md
            echo "$modified" | sed 's|^|‚Ä¢ |' >> changes.md
          fi

          if [[ -n "$deleted" ]]; then
            echo -e "\n### Removed" >> changes.md
            echo "$deleted" | sed 's|^|‚Ä¢ |' >> changes.md
          fi

      - name: Upload changes.md as artifact
        if: ${{ env.no_changes == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: changes-md
          path: changes.md

      - name: Prepare new branch, commit, and push changes
        if: ${{ env.no_changes == 'false' }}
        run: |
          git checkout -B $API_SPECS_BRANCH origin/main
          git add specs
          git commit -m "chore: updating API specs from qlik.dev"
          git push origin $API_SPECS_BRANCH --force

      - name: Get commit SHA
        if: ${{ env.no_changes == 'false' }}
        id: commit
        run: echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  create-consolidated-openapi:
    runs-on: ubuntu-latest
    needs: update-api-specs
    if: needs.update-api-specs.outputs.no_changes == 'false'
    outputs:
      no_changes: ${{ steps.git-status.outputs.no_changes }}
      commit_sha: ${{ steps.commit.outputs.commit_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.API_SPECS_BRANCH }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Create Consolidated OpenAPI Spec
        run: |
          chmod +x .github/scripts/consolidate-openapi.sh
          .github/scripts/consolidate-openapi.sh

      - name: Check for changes
        id: git-status
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add consolidated/qlik-cloud.json
          git fetch origin main || true
          if git rev-parse --verify origin/main >/dev/null 2>&1; then
            if git diff --cached --quiet origin/main -- consolidated/; then
              echo "No changes detected compared to main"
              echo "no_changes=true" >> $GITHUB_ENV
              echo "no_changes=true" >> $GITHUB_OUTPUT
            else
              echo "Changes detected compared to main"
              echo "no_changes=false" >> $GITHUB_ENV
              echo "no_changes=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No origin/main branch found, treating as changes detected"
            echo "no_changes=false" >> $GITHUB_ENV
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push consolidated file to PR branch
        if: ${{ env.no_changes == 'false' }}
        run: |
          git commit -m "chore: updating consolidated OpenAPI spec from API specs"
          echo "Pushing to branch: $API_SPECS_BRANCH"
          git push origin $API_SPECS_BRANCH

      - name: Get commit SHA
        if: ${{ env.no_changes == 'false' }}
        id: commit
        run: echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        
  create-pr:
    runs-on: ubuntu-latest
    needs: create-consolidated-openapi
    if: needs.update-api-specs.outputs.no_changes == 'false'
    env:
      CONSOLIDATED_COMMIT: ${{ needs.create-consolidated-openapi.outputs.commit_sha }}
      CONSOLIDATED_NO_CHANGES: ${{ needs.create-consolidated-openapi.outputs.no_changes }}
      BASE_COMMIT: ${{ needs.update-api-specs.outputs.commit_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for commit to be indexed by GitHub
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const expectedSha = process.env.CONSOLIDATED_NO_CHANGES === 'false'
              ? process.env.CONSOLIDATED_COMMIT
              : process.env.BASE_COMMIT;

            const branch = process.env.API_SPECS_BRANCH;
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            const delay = ms => new Promise(res => setTimeout(res, ms));
            let retries = 10;

            console.log(`üîé Waiting for commit ${expectedSha} to appear on branch ${branch}`);

            while (retries-- > 0) {
              const ref = await github.rest.git.getRef({
                owner,
                repo,
                ref: `heads/${branch}`
              });

              const currentSha = ref.data.object.sha;
              if (currentSha === expectedSha) {
                console.log(`Commit ${expectedSha} is now visible on ${branch}`);
                break;
              }

              console.log(`‚è≥ Not yet (${currentSha} != ${expectedSha}), retrying...`);
              await delay(3000);
            }

            if (retries <= 0) {
              throw new Error(`‚ùå Commit ${expectedSha} never appeared on ${branch}`);
            }
      - name: Find existing PR or create a new one
        id: find-or-create-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const headBranch = process.env.API_SPECS_BRANCH;
            const baseBranch = "main";

            const newPR = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "chore: updating API specs from qlik.dev",
              head: headBranch,
              base: baseBranch,
              body: "This is an automated regular pull of API specs from qlik.dev."
            });

            console.log(`New PR created: ${newPR.data.html_url}`);
            core.setOutput("pr_number", newPR.data.number);
            core.setOutput("is_new_pr", "true");

      - name: Download changes.md artifact
        if: ${{ steps.find-or-create-pr.outputs.is_new_pr == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: changes-md
      - name: Post PR comment with spec changes
        if: ${{ steps.find-or-create-pr.outputs.is_new_pr == 'true' }}
        run: |
          echo "Posting PR comment body:"
          echo '---'
          cat changes.md
          echo '---'
          body=$(cat <<EOF
          $(cat changes.md)
          EOF
          )
          gh pr comment ${{ steps.find-or-create-pr.outputs.pr_number }} --body "$body"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check and request review from withdave if not already assigned
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt("${{ steps.find-or-create-pr.outputs.pr_number }}");
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const existingReviewers = pr.requested_reviewers.map(r => r.login);
            if (!existingReviewers.includes("withdave")) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                reviewers: ["withdave"]
              });
              console.log(`Requested review from withdave for PR #${prNumber}`);
            } else {
              console.log(`withdave is already requested for PR #${prNumber}`);
            }

      - name: Enable auto-merge for the PR
        if: ${{ steps.find-or-create-pr.outputs.is_new_pr == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt("${{ steps.find-or-create-pr.outputs.pr_number }}");
            try {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              const pullRequestId = pr.data.node_id;

              console.log(`Attempting to enable auto-merge on PR #${prNumber}...`);

              await github.graphql(`
                mutation EnableAutoMerge($input: EnablePullRequestAutoMergeInput!) {
                  enablePullRequestAutoMerge(input: $input) {
                    pullRequest {
                      number
                      autoMergeRequest {
                        enabledAt
                      }
                    }
                  }
                }
              `, {
                input: {
                  pullRequestId: pullRequestId,
                  mergeMethod: "SQUASH"
                }
              });

              console.log(`Auto-merge enabled for PR #${prNumber}`);
            } catch (error) {
              console.log(`‚ö†Ô∏è Auto-merge could not be enabled for PR #${prNumber}: ${error.message}`);
              console.log(`This will not fail the workflow.`);
            }