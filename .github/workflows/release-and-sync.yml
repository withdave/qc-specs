name: Release and sync

on:
  push:
    branches:
      - main
    paths:
      - "consolidated/qlik-cloud.json"
  workflow_dispatch:

env:
  SPEC_FILE: consolidated/qlik-cloud.json

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version and name from OpenAPI JSON
        id: get_version
        run: |
          version=$(jq -r '.info.version' "${{ env.SPEC_FILE }}")
          name=$(jq -r '.info.title' "${{ env.SPEC_FILE }}")
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view v${{ steps.get_version.outputs.version }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: v${{ steps.get_version.outputs.version }}
          body: |
            Autogenerated release of v${{ steps.get_version.outputs.version }} of the consolidated Qlik Cloud API specs, for import into Postman and other similar tools. Available on Postman at [Qlik Cloud APIs](https://www.postman.com/qlik-api/api-reference/overview).
          generate_release_notes: true
          files: ${{ env.SPEC_FILE }}

  sync:
    runs-on: ubuntu-latest
    needs: release
    env:
      POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
      POSTMAN_WORKSPACE_ID: ${{ vars.POSTMAN_WORKSPACE_ID }}
      SPEC_FILE: consolidated/qlik-cloud.json
    steps:
      - uses: actions/checkout@v4

      - name: Extract version & name from OpenAPI JSON
        id: get_version
        run: |
          version=$(jq -r '.info.version' "${{ env.SPEC_FILE }}")
          echo "version=$version" >> $GITHUB_OUTPUT
          name=$(jq -r '.info.title' "${{ env.SPEC_FILE }}")
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Download spec from release
        run: |
          gh release download v${{ steps.get_version.outputs.version }} \
          --pattern "qlik-cloud.json" \
          --output openapi.json
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Install OpenAPI to Postman converter
        run: npm install -g openapi-to-postmanv2

      - name: Convert OpenAPI to Postman Collection
        run: |
          openapi2postmanv2 -s openapi.json -o postman.json -p

      - name: Get Postman Collection
        id: get_collection
        run: |
          COLLECTION_NAME="${{ steps.get_version.outputs.name }}"
          echo "Looking up collection named '${COLLECTION_NAME}' in workspace ${POSTMAN_WORKSPACE_ID}"
          collections_json=$(curl -s -H "X-Api-Key: ${POSTMAN_API_KEY}" \
            "https://api.getpostman.com/collections?workspace=${POSTMAN_WORKSPACE_ID}")
          collection_ids=($(echo "$collections_json" | jq -r --arg name "$COLLECTION_NAME" '.collections[] | select(.name == $name) | .uid'))
          count=${#collection_ids[@]}
          if [ "$count" -eq 1 ]; then
            collection_id="${collection_ids[0]}"
            echo "Found existing collection with ID $collection_id"
          elif [ "$count" -gt 1 ]; then
            echo "ERROR: More than one collection found with the name '$COLLECTION_NAME'. Please resolve duplicates in Postman workspace ${POSTMAN_WORKSPACE_ID}." >&2
            exit 1
          else
            collection_id=""
            echo "No existing collection found."
          fi
          echo "collection_id=$collection_id" >> $GITHUB_OUTPUT

      - name: Create Postman Collection
        if: steps.get_collection.outputs.collection_id == ''
        id: create_collection
        run: |
          response=$(jq -c '{collection: .}' postman.json | \
            curl -s -X POST "https://api.getpostman.com/collections?workspace=${POSTMAN_WORKSPACE_ID}" \
              -H "X-Api-Key: ${POSTMAN_API_KEY}" \
              -H "Content-Type: application/json" \
              -d @-)
          echo "Postman create collection response: $response"
          collection_id=$(echo "$response" | jq -r '.collection.uid // .collection.id // empty')
          if [ -z "$collection_id" ]; then
            echo "ERROR: Could not find collection ID in response. Exiting."
            exit 1
          fi
          echo "Created new collection with ID $collection_id"
          echo "collection_id=$collection_id" >> $GITHUB_OUTPUT

      - name: Update Postman Collection
        if: steps.get_collection.outputs.collection_id != ''
        run: |
          response=$(jq -c '{collection: .}' postman.json | \
            curl -s -X PUT "https://api.getpostman.com/collections/${{ steps.get_collection.outputs.collection_id }}?workspace=${POSTMAN_WORKSPACE_ID}" \
              -H "X-Api-Key: ${POSTMAN_API_KEY}" \
              -H "Content-Type: application/json" \
              -d @-)
          echo "Postman update collection response: $response"
          error=$(echo "$response" | jq -r '.error // empty')
          if [ -n "$error" ]; then
            echo "ERROR: Postman API returned error: $response"
            exit 1
          fi
