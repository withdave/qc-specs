{
  "info": {
    "title": "collections",
    "version": ""
  },
  "paths": {
    "/api/v1/collections": {
      "get": {
        "tags": [
          "collections"
        ],
        "summary": "List collections",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsListCollectionsResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "OK response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3 Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Bad Request response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Unauthorized response."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Internal Server Error response."
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "creatorId",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The case-sensitive string used to search for a resource by creatorId."
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The collection's unique identifier."
          },
          {
            "in": "query",
            "name": "includeItems",
            "schema": {
              "type": "string"
            },
            "examples": {
              "deep object": {
                "value": "includeItems[limit]=10&includeItems[sort]=-createdAt&IncludeItems[resourceType]=app"
              }
            },
            "required": false,
            "description": "Includes the list of items belonging to the collections. Supported parameters are 'limit', 'sort' and 'resourceType'. Supported formats are json formatted string or deep object style using square brackets."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100,
              "minimum": 1
            },
            "required": false,
            "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The case-sensitive string used to search for a collection by name."
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The cursor to the next page of resources. Provide either the\nnext or prev cursor, but not both.\n"
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The case-insensitive string used to search for a resource by name or description."
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "enum": [
                "+createdAt",
                "-createdAt",
                "+name",
                "-name",
                "+updatedAt",
                "-updatedAt"
              ],
              "type": "string"
            },
            "required": false,
            "description": "The property of a resource to sort on (default sort is +createdAt).\nThe supported properties are createdAt, updatedAt, and name. A property\nmust be prefixed by + or - to indicate ascending or descending sort order\nrespectively.\n"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/CollectionTypes"
            },
            "required": false,
            "description": "The case-sensitive string used to filter for a collection by type. Retrieve private collections with `private`, public collections with `publicgoverned`, and tags with `public`.\n"
          },
          {
            "in": "query",
            "name": "types",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CollectionTypes"
              }
            },
            "required": false,
            "description": "A comma-separated case-sensitive string used to filter by multiple types."
          }
        ],
        "description": "Retrieves the collections that the user has access to. This endpoint does not return the user's favorites collection, which can be retrieved with `/v1/collections/favorites`.\n",
        "operationId": "collections#listCollections",
        "x-qlik-permissions": [
          "collection:read",
          "collection.publicgoverned:read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      },
      "post": {
        "tags": [
          "collections"
        ],
        "summary": "Create a new collection.",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionResultResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Created response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3 Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Bad Request response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Unauthorized response."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Forbidden response."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Conflict response."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Internal Server Error response."
          }
        },
        "description": "Creates and returns a new collection. Collections of type `public` (shown as tags in the user interface) must have unique names. Other collection types can reuse names.\n",
        "operationId": "collections#createCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionsCreateCollectionRequestBody"
              }
            }
          },
          "required": true
        },
        "x-qlik-permissions": [
          "collection:create",
          "admin.collection.publicgoverned:create"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/api/v1/collections/{collectionId}": {
      "get": {
        "tags": [
          "collections"
        ],
        "summary": "Get a collection",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionResultResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "OK response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3 Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Bad Request response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Unauthorized response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Not Found response."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Internal Server Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The collection's unique identifier."
          }
        ],
        "description": "Finds and returns a collection.\n",
        "operationId": "collections#getCollection",
        "x-qlik-permissions": [
          "collection:read",
          "collection.publicgoverned:read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      },
      "patch": {
        "tags": [
          "collections"
        ],
        "summary": "Update collection",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionResultResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "OK response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3 Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Bad Request response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Unauthorized response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Not Found response."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Conflict response."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Internal Server Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The collection's unique identifier."
          }
        ],
        "description": "Updates the name, description, or type fields provided in the patch body. Can be used to publish a `private` collection as a `publicgoverned` collection by patching `/type` with `publicgoverned` once the collection contains at least 1 item. Can also be used to return a `publicgoverned` collection to `private`. Cannot be used to change between `public` (tag) and `private / publicgoverned` (collection).",
        "operationId": "collections#PatchCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionByIdPatch"
              }
            }
          },
          "required": true
        },
        "x-qlik-permissions": [
          "collection:update",
          "admin.collection.publicgoverned:update"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      },
      "put": {
        "tags": [
          "collections"
        ],
        "summary": "Update a collection's name and description",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionResultResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "OK response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3 Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Bad Request response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Unauthorized response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Not Found response."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Conflict response."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Internal Server Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The collection's unique identifier."
          }
        ],
        "description": "Updates a collection's name and description and returns the updated collection. Omitted and unsupported fields are ignored. To unset a field, provide the field's zero value.\n",
        "operationId": "collections#updateCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionsUpdateCollectionRequestBody"
              }
            }
          },
          "required": true
        },
        "x-qlik-permissions": [
          "collection:update",
          "admin.collection.publicgoverned:update"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      },
      "delete": {
        "tags": [
          "collections"
        ],
        "summary": "Delete a collection",
        "responses": {
          "204": {
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "No Content response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Unauthorized response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Not Found response."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Internal Server Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The collection's unique identifier."
          }
        ],
        "description": "Deletes a collection and removes all items from the collection.\n",
        "operationId": "collections#deleteCollection",
        "x-qlik-permissions": [
          "collection:delete",
          "admin.collection.publicgoverned:delete"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/api/v1/collections/{collectionId}/items": {
      "get": {
        "tags": [
          "collections"
        ],
        "summary": "List items in a collection",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsListCollectionItemsResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "OK response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3 Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Bad Request response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Unauthorized response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Not Found response."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Internal Server Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The collection's unique identifier. (This query also supports 'favorites' as the collectionID).\n"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100,
              "minimum": 1
            },
            "required": false,
            "description": "The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive)."
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The case-insensitive string used to search for a resource by name."
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The cursor to the next page of resources. Provide either the next or prev cursor, but not both."
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The cursor to the previous page of resources. Provide either the next or prev cursor, but not both."
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The case-insensitive string used to search for a resource by name or description."
          },
          {
            "in": "query",
            "name": "resourceId",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
          },
          {
            "in": "query",
            "name": "resourceLink",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "required": false,
            "description": "The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
          },
          {
            "in": "query",
            "name": "resourceType",
            "schema": {
              "$ref": "#/components/schemas/itemResourceTypeEnum"
            },
            "required": false,
            "description": "The case-sensitive string used to search for an item by resourceType."
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "enum": [
                "+createdAt",
                "-createdAt",
                "+name",
                "-name",
                "+updatedAt",
                "-updatedAt"
              ],
              "type": "string"
            },
            "required": false,
            "description": "The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively."
          },
          {
            "in": "query",
            "name": "spaceId",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The space's unique identifier (supports \\'personal\\' as spaceId)."
          },
          {
            "in": "query",
            "name": "shared",
            "schema": {
              "type": "boolean"
            },
            "description": "Whether or not to return items in a shared space.",
            "x-qlik-deprecated": true
          },
          {
            "$ref": "#/components/parameters/noActionParam"
          }
        ],
        "description": "Retrieves items from a collection that the user has access to.\n",
        "operationId": "collections#listCollectionItems",
        "x-qlik-permissions": [
          "collection:read",
          "collection.publicgoverned:read",
          "<item>:read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      },
      "post": {
        "tags": [
          "collections"
        ],
        "summary": "Add an item to a collection",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/itemResultResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Created response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3 Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Bad Request response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Unauthorized response."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Forbidden response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Not Found response."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Conflict response."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Internal Server Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The collection's unique identifier."
          }
        ],
        "description": "Adds an item to a collection and returns the item.\n",
        "operationId": "collections#addCollectionItem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionsAddCollectionItemRequestBody"
              }
            }
          },
          "required": true
        },
        "x-qlik-permissions": [
          "collection:read",
          "collection:update",
          "admin.collection.publicgoverned:add_content",
          "<item>:read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/api/v1/collections/{collectionId}/items/{itemId}": {
      "get": {
        "tags": [
          "collections"
        ],
        "summary": "Get an item",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/itemResultResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "OK response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3 Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Bad Request response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Unauthorized response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Not Found response."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Internal Server Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The collection's unique identifier."
          },
          {
            "in": "path",
            "name": "itemId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The item's unique identifier."
          }
        ],
        "description": "Finds and returns an item in a specific collection. See GET `/items/{id}`.\n",
        "operationId": "collections#getCollectionItem",
        "x-qlik-permissions": [
          "collection:read",
          "collection.publicgoverned:read",
          "<item>:read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      },
      "delete": {
        "tags": [
          "collections"
        ],
        "summary": "Remove an item",
        "responses": {
          "204": {
            "description": "No Content response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3 Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Bad Request response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Unauthorized response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Not Found response."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Internal Server Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The collection's unique identifier."
          },
          {
            "in": "path",
            "name": "itemId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The item's unique identifier."
          }
        ],
        "description": "Removes an item from a collection.\n",
        "operationId": "collections#deleteCollectionItem",
        "x-qlik-permissions": [
          "collection:read",
          "collection:update",
          "admin.collection.publicgoverned:remove_content",
          "<item>:read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/api/v1/collections/favorites": {
      "get": {
        "tags": [
          "collections"
        ],
        "summary": "Get user's favorites collection",
        "responses": {
          "302": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              },
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Found response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Unauthorized response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Not Found response."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseBody"
                }
              }
            },
            "headers": {
              "X-B3-Traceid": {
                "$ref": "#/components/headers/X-B3-Traceid"
              }
            },
            "description": "Internal Server Error response."
          }
        },
        "description": "Lists the user's favorites collection.\n",
        "operationId": "collections#getFavoritesCollection",
        "x-qlik-permissions": [
          "collection:read",
          "collection.publicgoverned:read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    }
  },
  "x-qlik-categories": [
    "external/manage"
  ],
  "openapi": "3.0.0",
  "components": {
    "headers": {
      "X-B3-Traceid": {
        "schema": {
          "type": "string"
        },
        "description": "The TraceId for the trace associated with the call stack. Every span in a trace shares this ID."
      }
    },
    "parameters": {
      "noActionParam": {
        "in": "query",
        "name": "noActions",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "required": false,
        "description": "If set to true, the user's available actions for each item will not be evaluated meaning the actions-array will be omitted from the response (reduces response time).\n"
      }
    },
    "schemas": {
      "CollectionByIdPatch": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "op",
            "path",
            "value"
          ],
          "properties": {
            "op": {
              "enum": [
                "replace"
              ],
              "type": "string",
              "description": "The operation to be performed."
            },
            "path": {
              "enum": [
                "/name",
                "/description",
                "/type"
              ],
              "type": "string",
              "description": "Field of collection to be patched."
            },
            "value": {
              "type": "string",
              "description": "The value to be used within the operations.\n- name: The name of the collection. Must not be \"\".\n- description: The description of the collection. Empty string \"\" is allowed.\n- type: The type of the collection. Via this path the collection type can be toggled between \"private\" and \"publicgoverned\".\n"
            }
          },
          "description": "A JSONPatch document as defined by RFC 6902."
        }
      },
      "collectionLinksResponseBody": {
        "type": "object",
        "properties": {
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "items": {
            "$ref": "#/components/schemas/Link"
          }
        }
      },
      "collectionMetaResponseBody": {
        "type": "object",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/itemsResultResponseBody"
          }
        },
        "description": "Collection metadata and computed fields."
      },
      "collectionResultResponseBody": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "createdAt",
          "updatedAt",
          "tenantId",
          "links",
          "itemCount"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The collection's unique identifier."
          },
          "full": {
            "type": "boolean",
            "description": "States if a collection has reached its items limit or not"
          },
          "meta": {
            "$ref": "#/components/schemas/collectionMetaResponseBody"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "type": {
            "enum": [
              "private",
              "public",
              "favorite",
              "publicgoverned"
            ],
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/collectionLinksResponseBody"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant that owns the collection. This property is populated by using JWT."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The RFC3339 datetime when the collection was created."
          },
          "creatorId": {
            "type": "string",
            "description": "The ID of the user who created the collection. This property is only populated if the JWT contains a userId."
          },
          "itemCount": {
            "type": "integer",
            "format": "int64",
            "description": "The number of items that have been added to the collection that the user has access to."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The RFC3339 datetime when the collection was last updated."
          },
          "updaterId": {
            "type": "string",
            "description": "The ID of the user who last updated the collection. This property is only populated if the JWT contains a userId."
          },
          "description": {
            "type": "string"
          }
        },
        "description": "A collection."
      },
      "CollectionsAddCollectionItemRequestBody": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The item's unique identifier."
          }
        }
      },
      "CollectionsCreateCollectionRequestBody": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "For `public` collections (tags), if name already exists in the tenant as a `public` collection, this call will fail with a `409` response."
          },
          "type": {
            "$ref": "#/components/schemas/CollectionTypes"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "collectionsLinksResponseBody": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "prev": {
            "$ref": "#/components/schemas/Link"
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          }
        }
      },
      "CollectionsListCollectionItemsResponseBody": {
        "type": "object",
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/itemResultResponseBody"
            }
          }
        },
        "description": "ListCollectionItemsResponseBody result type"
      },
      "CollectionsListCollectionsResponseBody": {
        "type": "object",
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectionResultResponseBody"
            }
          },
          "links": {
            "$ref": "#/components/schemas/collectionsLinksResponseBody"
          }
        },
        "description": "ListCollectionsResponseBody result type"
      },
      "CollectionsUpdateCollectionRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          }
        }
      },
      "CollectionTypes": {
        "enum": [
          "private",
          "public",
          "publicgoverned"
        ],
        "type": "string"
      },
      "ErrorResponseBody": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceError"
            }
          }
        }
      },
      "itemLinksResponseBody": {
        "type": "object",
        "properties": {
          "open": {
            "$ref": "#/components/schemas/Link"
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "qvPlugin": {
            "$ref": "#/components/schemas/Link"
          },
          "thumbnail": {
            "$ref": "#/components/schemas/Link"
          },
          "collections": {
            "$ref": "#/components/schemas/Link"
          }
        }
      },
      "itemMetaResponseBody": {
        "type": "object",
        "required": [
          "isFavorited",
          "actions",
          "tags",
          "collections"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/itemTagResponseBody"
            },
            "description": "An array of tags that the item is part of."
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The actions that the user can perform on the item."
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/itemTagResponseBody"
            },
            "description": "An array of collections that the item is part of."
          },
          "isFavorited": {
            "type": "boolean",
            "description": "The flag that indicates if item is in the user's favorites collection."
          }
        },
        "description": "Item metadata and computed fields."
      },
      "itemResourceTypeEnum": {
        "enum": [
          "app",
          "qlikview",
          "qvapp",
          "genericlink",
          "sharingservicetask",
          "note",
          "dataasset",
          "dataset",
          "automation",
          "automl-experiment",
          "automl-deployment",
          "assistant",
          "dataproduct",
          "dataqualityrule",
          "glossary",
          "knowledgebase",
          "script"
        ],
        "type": "string",
        "description": "The case-sensitive string defining the item's type."
      },
      "itemResultResponseBody": {
        "type": "object",
        "required": [
          "id",
          "name",
          "tenantId",
          "createdAt",
          "updatedAt",
          "isFavorited",
          "links",
          "resourceType",
          "resourceCreatedAt",
          "resourceUpdatedAt",
          "actions",
          "collectionIds",
          "resourceAttributes",
          "resourceCustomAttributes",
          "meta"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The item's unique identifier."
          },
          "meta": {
            "$ref": "#/components/schemas/itemMetaResponseBody"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "links": {
            "$ref": "#/components/schemas/itemLinksResponseBody"
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The actions that the user can perform on the item."
          },
          "ownerId": {
            "type": "string",
            "description": "The ID of the user who owns the item."
          },
          "spaceId": {
            "type": "string",
            "description": "The space's unique identifier."
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant that owns the item. This is populated using the JWT."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The RFC3339 datetime when the item was created."
          },
          "creatorId": {
            "type": "string",
            "description": "The ID of the user who created the item. This is only populated if the JWT contains a userId."
          },
          "itemViews": {
            "$ref": "#/components/schemas/itemViewsResponseBody"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The RFC3339 datetime when the item was last updated."
          },
          "updaterId": {
            "type": "string",
            "description": "ID of the user who last updated the item. This is only populated if the JWT contains a userId."
          },
          "resourceId": {
            "type": "string",
            "description": "The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
          },
          "description": {
            "type": "string"
          },
          "isFavorited": {
            "type": "boolean",
            "description": "The flag that indicates if item is in the user's favorites collection."
          },
          "thumbnailId": {
            "type": "string",
            "description": "The item thumbnail's unique identifier. This is optional for internal resources."
          },
          "resourceLink": {
            "type": "string",
            "format": "uri",
            "description": "The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both."
          },
          "resourceSize": {
            "$ref": "#/components/schemas/itemsResourceSizeResponseBody"
          },
          "resourceType": {
            "$ref": "#/components/schemas/itemResourceTypeEnum"
          },
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the collections that the item has been added to."
          },
          "resourceSubType": {
            "type": "string",
            "description": "Optional field defining the item's subtype, if any."
          },
          "resourceCreatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The RFC3339 datetime when the resource that the item references was created."
          },
          "resourceUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The RFC3339 datetime when the resource that the item references was last updated."
          },
          "resourceAttributes": {
            "type": "object",
            "additionalProperties": true
          },
          "resourceReloadStatus": {
            "type": "string",
            "description": "If the resource last reload was successful or not."
          },
          "resourceReloadEndTime": {
            "type": "string",
            "format": "date-time",
            "description": "The RFC3339 datetime when the resource last reload ended."
          },
          "resourceCustomAttributes": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "description": "An item."
      },
      "itemsLinksResponseBody": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "prev": {
            "$ref": "#/components/schemas/Link"
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "collection": {
            "$ref": "#/components/schemas/Link"
          }
        }
      },
      "itemsResourceSizeResponseBody": {
        "type": "object",
        "properties": {
          "appFile": {
            "type": "number",
            "description": "Size of the app on disk in bytes."
          },
          "appMemory": {
            "type": "number",
            "description": "Size of the app in memory in bytes."
          }
        }
      },
      "itemsResultResponseBody": {
        "type": "object",
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/itemResultResponseBody"
            }
          },
          "links": {
            "$ref": "#/components/schemas/itemsLinksResponseBody"
          }
        },
        "description": "Multiple items."
      },
      "itemTagResponseBody": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tag/collection."
          },
          "name": {
            "type": "string",
            "description": "The name of the tag/collection."
          }
        },
        "description": "Holds basic information about a tag or collection."
      },
      "itemViewsResponseBody": {
        "type": "object",
        "properties": {
          "week": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/itemViewsWeeksResponseBody"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of views the resource got during the last 28 days."
          },
          "trend": {
            "type": "number",
            "example": -4.2,
            "description": "Trend in views over the last 4 weeks. The trend value is a float number representing a linear regression slope (the x-coefficient) calculated from the weekly unique users views in the preceding 4 weeks."
          },
          "unique": {
            "type": "integer",
            "description": "Number of unique users who viewed the resource during the last 28 days."
          },
          "usedBy": {
            "type": "integer",
            "description": "Number of apps this dataset is used in (datasets only)."
          }
        }
      },
      "itemViewsWeeksResponseBody": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time",
            "description": "The RFC3339 datetime representing the start of the referenced week."
          },
          "total": {
            "type": "integer",
            "description": "Total number of views the resource got during the referenced week."
          },
          "unique": {
            "type": "integer",
            "description": "Number of unique users who viewed the resource during the referenced week."
          }
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "meta": {
        "type": "object",
        "properties": {
          "fault": {
            "type": "boolean",
            "description": "Is the error a server-side fault?"
          },
          "explain": {
            "type": "object",
            "description": "Further explanation of the error"
          },
          "timeout": {
            "type": "boolean",
            "description": "Is the error a timeout?"
          },
          "temporary": {
            "type": "boolean",
            "description": "Is the error temporary?"
          }
        }
      },
      "ServiceError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code is a unique identifier for this error class."
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          },
          "title": {
            "type": "string",
            "description": "Title is the name of this class of errors."
          },
          "detail": {
            "type": "string",
            "description": "Detail is a human-readable explanation specific to this occurrence of the problem."
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://{tenant}.{region}.qlikcloud.com",
      "variables": {
        "region": {
          "default": "us",
          "description": "The region the tenant is hosted in"
        },
        "tenant": {
          "default": "your-tenant",
          "description": "Name of the tenant that will be called"
        }
      }
    }
  ]
}