{
  "info": {
    "title": "apps",
    "version": ""
  },
  "paths": {
    "/v1/apps": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NxApp"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "description": "Creates a new app.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateApp"
              }
            }
          },
          "required": true,
          "description": "Attributes that the user wants to set in new app."
        },
        "x-qlik-access-control": [
          "create"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NxApp"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Retrieves information for a specific app.",
        "x-qlik-access-control": [
          "read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NxApp"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Updates the information for a specific app.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApp"
              }
            }
          },
          "required": true,
          "description": "Attributes that user wants to set."
        },
        "x-qlik-access-control": [
          "update"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      },
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Deletes a specific app.",
        "x-qlik-access-control": [
          "delete"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}/copy": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NxApp"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Copies a specific app.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateApp"
              }
            }
          },
          "required": true,
          "description": "Attributes that should be set in the copy."
        },
        "x-qlik-access-control": [
          "duplicate"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}/data/lineage": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LineageInfoRest"
                  }
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Retrieves the lineage for an app.\nReturns a JSON-formatted array of strings describing the lineage of the app.",
        "x-qlik-access-control": [
          "reload"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/{appId}/data/metadata": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataModelMetadata"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Retrieves the data model and reload statistics metadata of an app.\nAn empty metadata structure is returned if the metadata is not available in the app.",
        "x-qlik-access-control": [
          "read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/{appId}/export": {
      "post": {
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "The URL of the exported app on Temporary content service."
              }
            },
            "description": "Created"
          },
          "400": {
            "headers": {},
            "description": "Bad request"
          },
          "403": {
            "headers": {},
            "description": "Forbidden"
          },
          "404": {
            "headers": {},
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          },
          {
            "in": "query",
            "name": "NoData",
            "schema": {
              "type": "boolean"
            },
            "description": "The flag indicating if only object contents should be exported."
          }
        ],
        "description": "Exports a specific app.",
        "x-qlik-access-control": [
          "read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}/insight-analyses": {
      "get": {
        "tags": [
          "insight-analyses"
        ],
        "summary": "Returns information about supported analyses for the app's data model. Lists available analysis types, along with minimum and maximum number of dimensions, measures, and fields.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisDescriptorResponse"
                }
              }
            },
            "description": "The request is successfully processed and information about supported analyses is returned."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Bad request. The payload is not formed correctly."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "User is not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string",
              "format": "uid"
            },
            "required": true,
            "description": "Qlik Sense app identifier"
          },
          {
            "in": "header",
            "name": "accept-language",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "language specified as an ISO-639-1 code. Defaults to 'en' (English)."
          }
        ],
        "operationId": "getAnalyses",
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "special",
          "limit": 500
        }
      }
    },
    "/v1/apps/{appId}/insight-analyses/actions/recommend": {
      "post": {
        "tags": [
          "insight-analyses"
        ],
        "summary": "Returns analysis recommendations in response to a natural language question, a set of fields and master items, or a set of fields and master items with an optional target analysis.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisRecommendationResponse"
                }
              }
            },
            "description": "The request is successfully processed and recommendations are returned."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Bad request. The payload is not formed correctly."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "User is not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Not found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Invalid Business Logic"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string",
              "format": "uid"
            },
            "required": true,
            "description": "Qlik Sense app identifier"
          },
          {
            "in": "header",
            "name": "accept-language",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "language specified as an ISO-639-1 code. Defaults to 'en' (English)."
          }
        ],
        "operationId": "getRecommendations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisRecommendRequest"
              }
            }
          },
          "required": true
        },
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "special",
          "limit": 500
        }
      }
    },
    "/v1/apps/{appId}/insight-analyses/model": {
      "get": {
        "tags": [
          "insight-analyses"
        ],
        "summary": "Returns information about model used to make analysis recommendations. Lists all fields and master items in the logical model, along with an indication of the validity of the logical model if the default is not used.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisModelResponse"
                }
              }
            },
            "description": "The request is successfully processed and information about model is returned."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Bad request. The payload is not formed correctly."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "User is not authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Not found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Invalid Business Logic"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Unprocessable entity. The payload contains fields\nthat are invalid, such as too long of a query.\n"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string",
              "format": "uid"
            },
            "required": true,
            "description": "Qlik Sense app identifier"
          }
        ],
        "operationId": "getBusinessModel",
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "special",
          "limit": 500
        }
      }
    },
    "/v1/apps/{appId}/media/files/{path}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {},
            "description": "OK"
          },
          "403": {
            "headers": {},
            "description": "Forbidden"
          },
          "404": {
            "headers": {},
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique application identifier."
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Path to file content."
          }
        ],
        "description": "Gets media content from file.\nReturns a stream of bytes containing the media file content on success, or error if file is not found.",
        "x-qlik-access-control": [
          "read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "headers": {},
            "description": "OK"
          },
          "403": {
            "headers": {},
            "description": "Forbidden"
          },
          "404": {
            "headers": {},
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique application identifier."
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Path to file content."
          }
        ],
        "description": "Stores the media content file.\nReturns OK if the bytes containing the media file content were successfully stored, or error in case of failure, lack of permission or file already exists on the supplied path.",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/FileData"
              }
            }
          },
          "required": true,
          "description": ""
        },
        "x-qlik-access-control": [
          "update"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      },
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "headers": {},
            "description": "OK"
          },
          "403": {
            "headers": {},
            "description": "Forbidden"
          },
          "404": {
            "headers": {},
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique application identifier."
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Path to file content."
          }
        ],
        "description": "Deletes a media content file or complete directory.\nReturns OK if the bytes containing the media file (or the complete content of a directory) were successfully deleted, or error in case of failure or lack of permission.",
        "x-qlik-access-control": [
          "update"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}/media/list/{path}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppContentList"
                }
              }
            },
            "headers": {},
            "description": "OK"
          },
          "403": {
            "headers": {},
            "description": "Forbidden"
          },
          "404": {
            "headers": {},
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique application identifier."
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The path to sub folder with static content relative to the root folder. Use empty path to access the root folder."
          },
          {
            "in": "query",
            "name": "show",
            "schema": {
              "type": "string"
            },
            "description": "Optional. List output can include files and folders in different ways:\n* Not recursive, default if show option is not supplied or incorrectly specified, results in output with files and empty directories for the path specified only.\n* Recursive(r), use ?show=r or ?show=recursive, results in a recursive output with files, all empty folders are excluded.\n* All(a), use ?show=a or ?show=all, results in a recursive output with files and empty directories."
          }
        ],
        "description": "Lists media content.\nReturns a JSON formatted array of strings describing the available media content or error if the optional path supplied is not found.",
        "x-qlik-access-control": [
          "read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/{appId}/media/thumbnail": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {},
            "description": "OK"
          },
          "403": {
            "headers": {},
            "description": "Forbidden"
          },
          "404": {
            "headers": {},
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique application identifier."
          }
        ],
        "description": "Gets media content from file currently used as application thumbnail.\nReturns a stream of bytes containing the media file content on success, or error if file is not found.\nThe image selected as thumbnail is only updated when application is saved.",
        "x-qlik-access-control": [
          "read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/{appId}/objects/{objectId}/actions/change-owner": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NxAppObject"
                }
              }
            },
            "headers": {},
            "description": "OK"
          },
          "400": {
            "headers": {},
            "description": "Bad request"
          },
          "404": {
            "headers": {},
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          },
          {
            "in": "path",
            "name": "objectId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the object."
          }
        ],
        "description": "Sets owner on an app object.\nThe user must be the owner of the object.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOwner"
              }
            }
          },
          "required": true,
          "description": "New owner."
        },
        "x-qlik-access-control": [
          "update"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}/owner": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NxApp"
                }
              }
            },
            "headers": {},
            "description": "OK"
          },
          "403": {
            "headers": {},
            "description": "Forbidden"
          },
          "404": {
            "headers": {},
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Changes owner of the app.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOwner"
              }
            }
          },
          "required": true,
          "description": "New owner."
        },
        "x-qlik-access-control": [
          "change_owner"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}/publish": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NxApp"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Publishes a specific app to a managed space.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PublishApp"
              }
            }
          },
          "required": true,
          "description": "Publish information for the app."
        },
        "x-qlik-access-control": [
          "publish"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NxApp"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Republishes a published app to a managed space.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RepublishApp"
              }
            }
          },
          "required": true,
          "description": "Republish information for the app."
        },
        "x-qlik-access-control": [
          "publish"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}/reloads/logs": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptLogList"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Retrieves the metadata about all script logs stored for an app.\nReturns an array of ScriptLogMeta objects.",
        "x-qlik-access-control": [
          "reload"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/{appId}/reloads/logs/{reloadId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          },
          {
            "in": "path",
            "name": "reloadId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the reload."
          }
        ],
        "description": "Retrieves the log of a specific reload.\nReturns the log as \"text/plain; charset=UTF-8\".",
        "x-qlik-access-control": [
          "reload"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/{appId}/reloads/metadata/{reloadId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReloadListMetadata"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app"
          },
          {
            "in": "path",
            "name": "reloadId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the reload. Use empty reloadId to get all reloads."
          },
          {
            "in": "query",
            "name": "includeSkipStoreReloads",
            "schema": {
              "type": "boolean"
            },
            "description": "Include metadata for reloads ran with SkipStore flag set to true. Default: false"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Maximum number of records to return from this request. Default: 100"
          }
        ],
        "description": "Retrieves the app reload metadata list.\nReload metadata contains reload information, including reload id, duration, endtime and lineage load info.",
        "x-qlik-access-control": [
          "read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/{appId}/report-filters": {
      "get": {
        "tags": [
          "filters"
        ],
        "summary": "Get the filter list",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterList"
                }
              }
            },
            "description": "The filters have been successfully returned."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Bad request. Malformed syntax, errors in params."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Unauthorized, JWT invalid or not provided."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Forbidden, user lacks sufficient permissions to access the resource."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string",
              "format": "uid",
              "example": "11ecf638-0be4-4b94-a9e6-91218f34e175"
            },
            "required": true,
            "description": "Qlik Sense app identifier"
          },
          {
            "in": "query",
            "name": "filterTypes",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "REP",
                  "SUB"
                ],
                "type": "string"
              },
              "minItems": 1
            },
            "required": true,
            "description": "The filter type (REP, SUB). REP stands for report bookmark, SUB for subscription bookmark."
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The advanced filtering to use for the query. Refer to [RFC 7644](https://datatracker.ietf.org/doc/rfc7644/) for the syntax. Cannot be combined with any of the fields marked as deprecated. All conditional statements within this query parameter are case insensitive.\nThe following fields support the `co` (contains) operator: `name`, `description`\nThe following fields support the `eq` (equals) operator: `ownerId`\nExample:\n(name co \"query1\" or description co \"query2\") and ownerId eq \"123\"\n"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20,
              "maximum": 100,
              "minimum": 1
            },
            "required": false,
            "description": "Limit the returned result set"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "string",
              "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
              "nullable": true
            },
            "example": "NzlmNzI5NWMtZGJlZC00Y2Y4LThkNDAtMzQ5ZDU3YzNjMzQ1",
            "description": "If present, the cursor that starts the page of data that is returned."
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "+ownerId",
                  "-ownerId",
                  "-name",
                  "+name",
                  "+description",
                  "-description",
                  "+createdAt",
                  "-createdAt",
                  "+updatedAt",
                  "-updatedAt"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "Sorting parameters."
          }
        ],
        "description": "List all filters that are present in the given app. Filters allow to reduce the app data visible in a report output. Each filter can contain definitions on one or multiple fields.",
        "operationId": "filtersList",
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      },
      "post": {
        "tags": [
          "filters"
        ],
        "summary": "Create a new filter.",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            },
            "description": "The filter has been successfully created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Bad request, malformed syntax, errors in params or the report request is not valid."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Unauthorized, JWT invalid or not provided."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Forbidden, user lacks sufficient permissions to access the resource."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Filter name conflict."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string",
              "format": "uid",
              "example": "11ecf638-0be4-4b94-a9e6-91218f34e175"
            },
            "required": true,
            "description": "Qlik Sense app identifier"
          }
        ],
        "description": "Creates a new report filter which is used to re-apply selections, variables, patches to an engine session.",
        "operationId": "filtersCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterRequest"
              }
            }
          },
          "required": true,
          "description": "The filter definition."
        },
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}/report-filters/{id}": {
      "get": {
        "tags": [
          "filters"
        ],
        "summary": "Get a filter",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            },
            "description": "The filter has been successfully returned."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Bad request. Malformed syntax, errors in params."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Unauthorized, JWT invalid or not provided."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Forbidden, user lacks sufficient permissions to access the resource."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string",
              "format": "uid",
              "example": "01562a37-23e3-4b43-865d-84c26122276c"
            },
            "required": true,
            "description": "Qlik Sense app identifier"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "01562a37-23e3-4b43-865d-84c26122276c"
            },
            "required": true,
            "description": "The filter id identifier (bookmarkId)."
          }
        ],
        "operationId": "filtersGet",
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      },
      "patch": {
        "tags": [
          "filters"
        ],
        "summary": "Update a filter",
        "responses": {
          "204": {
            "description": "The filter has been successfully patched."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Bad request. Malformed syntax, errors in params."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Unauthorized, JWT invalid or not provided."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Forbidden, user lacks sufficient permissions to access the resource."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Filter name conflict. A filter with the same name already exists."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string",
              "format": "uid",
              "example": "01562a37-23e3-4b43-865d-84c26122276c"
            },
            "required": true,
            "description": "Qlik Sense app identifier"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "01562a37-23e3-4b43-865d-84c26122276c"
            },
            "required": true,
            "description": "The filter id identifier (bookmarkId)."
          }
        ],
        "operationId": "filtersUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchFilter"
              }
            }
          },
          "required": true,
          "description": "The filter definition that will replace the existing one."
        },
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      },
      "delete": {
        "tags": [
          "filters"
        ],
        "summary": "Delete a filter",
        "responses": {
          "204": {
            "description": "The filter has been successfully deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Bad request. Malformed syntax, errors in params."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Unauthorized, JWT invalid or not provided."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Forbidden, user lacks sufficient permissions to access the resource."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string",
              "format": "uid",
              "example": "01562a37-23e3-4b43-865d-84c26122276c"
            },
            "required": true,
            "description": "Qlik Sense app identifier"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "01562a37-23e3-4b43-865d-84c26122276c"
            },
            "required": true,
            "description": "The filter id identifier (bookmarkId)."
          }
        ],
        "operationId": "filtersDelete",
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}/report-filters/actions/count": {
      "get": {
        "tags": [
          "filters"
        ],
        "summary": "Get the number of filters for the given app and filter types",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FiltersCount"
                }
              }
            },
            "description": "The count of filters."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Bad request. Malformed syntax, errors in params."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Unauthorized, JWT invalid or not provided."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Forbidden, user lacks sufficient permissions to access the resource."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Too many request. Indicates the user has sent too many requests in a given amount of time, aka \"rate limiting\"."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterErrors"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string",
              "format": "uid",
              "example": "01562a37-23e3-4b43-865d-84c26122276c"
            },
            "required": true,
            "description": "Qlik Sense app identifier"
          },
          {
            "in": "query",
            "name": "filterTypes",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "REP",
                  "SUB"
                ],
                "type": "string"
              },
              "example": [
                "REP"
              ],
              "minItems": 1
            },
            "required": true,
            "description": "The filter type (REP, SUB). REP stands for report bookmark, SUB for subscription bookmark."
          }
        ],
        "operationId": "filtersCount",
        "x-qlik-visibility": "public",
        "x-qlik-stability": "stable",
        "x-qlik-categories": [
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/{appId}/scripts": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptMetaList"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "A scim filter expression defining which script versions should be retrieved. Filterable fields are:\n* ScriptId\n* ModifiedTime\n* ModifierId"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Maximum number of records to return from this request."
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "string"
            },
            "description": "Opaque definition of which page of the result set to return. Returned from a previous call using the same filter. Not yet supported."
          }
        ],
        "description": "Retrieves the script history for an app.\nReturns information about the saved versions of the script in a list sorted with latest first.",
        "x-qlik-access-control": [
          "read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Sets script for an app.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ScriptVersion"
              }
            }
          },
          "required": true,
          "description": "The script to set."
        },
        "x-qlik-access-control": [
          "update"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}/scripts/{id}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptVersion"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the script version, or 'current' for retrieving the current version."
          }
        ],
        "description": "Retrieves a version of the script for an app.\nReturns the script text.",
        "x-qlik-access-control": [
          "read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the script version."
          }
        ],
        "description": "Updates a specific version of the script for an app.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NxPatch"
                }
              }
            }
          },
          "required": true,
          "description": "Array of patches for the object ScriptVersion.\n<div class=note>Patches have limited functionality for this object. Only /versionMessage can be modified using operations add, remove and replace.</div>"
        },
        "x-qlik-access-control": [
          "update"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      },
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the script version"
          }
        ],
        "description": "Deletes a specific version of the script for an app.\nFails if the supplied id is the current version.",
        "x-qlik-access-control": [
          "update"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{appId}/space": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NxApp"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Sets space on a specific app.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSpace"
              }
            }
          },
          "required": true,
          "description": "New space."
        },
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      },
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NxApp"
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Identifier of the app."
          }
        ],
        "description": "Removes space from a specific app.",
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/{guid}/evaluations": {
      "get": {
        "tags": [
          "evaluation"
        ],
        "summary": "Retrieve a list of all historic evaluations for an app GUID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/evaluations"
                }
              }
            },
            "description": "Evaluation(s) retrieved successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Bad request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Not Found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "guid",
            "schema": {
              "type": "string"
            },
            "example": "abcdefghijklmnopq",
            "required": true,
            "description": "The app guid."
          },
          {
            "in": "query",
            "name": "all",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Get the full data of the evaluation"
          },
          {
            "in": "query",
            "name": "fileMode",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Add file transfer headers to response"
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Specify output format, currently supported are 'json' and 'xml'"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            },
            "required": false,
            "description": "Number of results to return per page."
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The app evaluation id to get next page from"
          },
          {
            "in": "query",
            "name": "prev",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The app evaluation id to get previous page from"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Property to sort list on"
          }
        ],
        "description": "Find all evaluations for an app GUID.\nSupports paging via next, prev which are sent in the response body\n",
        "operationId": "evaluation#getEvaluations",
        "x-qlik-stability": "stable",
        "x-qlik-visibility": "public",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      },
      "post": {
        "tags": [
          "evaluation"
        ],
        "summary": "Queue an app evaluation",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/evaluation"
                }
              }
            },
            "description": "App evaluation queued."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Bad request, incorrect body."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "User lacks permissions to evaluate app."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "App does not exist."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "guid",
            "schema": {
              "type": "string"
            },
            "example": "abcdefghijklmnopq",
            "required": true,
            "description": "Guid of the app."
          }
        ],
        "description": "Queue an app evaluation by its app guid.\n",
        "operationId": "evaluation#queueEvaluation",
        "x-qlik-stability": "stable",
        "x-qlik-visibility": "public",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/evaluations/{baseid}/actions/compare/{comparisonid}": {
      "get": {
        "tags": [
          "evaluation"
        ],
        "summary": "Compare two evaluations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comparison"
                }
              }
            },
            "description": "Comparison executed successfully."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Not Found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "baseid",
            "schema": {
              "type": "string"
            },
            "example": "abcdefghijklmnopq",
            "required": true,
            "description": "Id of the baseline evaluation"
          },
          {
            "in": "path",
            "name": "comparisonid",
            "schema": {
              "type": "string"
            },
            "example": "abcdefghijklmnopq",
            "required": true,
            "description": "Id of the comparison evaluation"
          },
          {
            "in": "query",
            "name": "all",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Get the full list of comparisons including non-significant diffs"
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Specify output format, currently supported are 'json' and 'xml'"
          }
        ],
        "description": "Accepts two evaluation ids and returns a comparison denoting the differences between the two.\n",
        "operationId": "evaluation#compareTwo",
        "x-qlik-stability": "stable",
        "x-qlik-visibility": "public",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/evaluations/{baseid}/actions/compare/{comparisonid}/actions/download": {
      "get": {
        "tags": [
          "evaluation"
        ],
        "summary": "Download a comparison log of two evaluations",
        "responses": {
          "200": {
            "content": {
              "application/xml": {},
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comparison"
                }
              }
            },
            "description": "Comparison executed successfully."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Not Found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "baseid",
            "schema": {
              "type": "string"
            },
            "example": "abcdefghijklmnopq",
            "required": true,
            "description": "Id of the baseline evaluation"
          },
          {
            "in": "path",
            "name": "comparisonid",
            "schema": {
              "type": "string"
            },
            "example": "abcdefghijklmnopq",
            "required": true,
            "description": "Id of the comparison evaluation"
          }
        ],
        "description": "Accepts two evaluation ids and downloads a log, in XML format, denoting the differences between the two.\n",
        "operationId": "evaluation#downloadCompareTwo",
        "x-qlik-stability": "stable",
        "x-qlik-visibility": "public",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/evaluations/{id}": {
      "get": {
        "tags": [
          "evaluation"
        ],
        "summary": "Retrieve a specific evaluation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/evaluation"
                }
              }
            },
            "description": "Evaluation(s) retrieved successfully."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Not Found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "example": "abcdefghijklmnopq",
            "required": true,
            "description": "Id of the desired evaluation."
          },
          {
            "in": "query",
            "name": "all",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Get the full data of the evaluation"
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Specify output format, currently supported are 'json' and 'xml'"
          }
        ],
        "description": "Find an evaluation by a specific id.\n",
        "operationId": "evaluation#getOneEvaluation",
        "x-qlik-stability": "stable",
        "x-qlik-visibility": "public",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/evaluations/{id}/actions/download": {
      "get": {
        "tags": [
          "evaluation"
        ],
        "summary": "Download a detailed XML log of a specific evaluation",
        "responses": {
          "200": {
            "content": {
              "application/xml": {},
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/evaluation"
                }
              }
            },
            "description": "Evaluation(s) retrieved successfully."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Not Found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "example": "abcdefghijklmnopq",
            "required": true,
            "description": "Id of the desired evaluation."
          }
        ],
        "description": "Find and download an evaluation log by a specific evaluation id.\n",
        "operationId": "evaluation#downloadOneEvaluation",
        "x-qlik-stability": "stable",
        "x-qlik-visibility": "public",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    },
    "/v1/apps/import": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NxApp"
                }
              }
            },
            "headers": {},
            "description": "OK"
          },
          "404": {
            "headers": {},
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "appId",
            "schema": {
              "type": "string"
            },
            "description": "The app ID of the target app when source is qvw file."
          },
          {
            "in": "query",
            "name": "fallbackName",
            "schema": {
              "type": "string"
            },
            "description": "The name of the target app when source does not have a specified name, applicable if source is qvw file."
          },
          {
            "in": "query",
            "name": "fileId",
            "schema": {
              "type": "string"
            },
            "description": "The file ID to be downloaded from Temporary Content Service (TCS) and used during import."
          },
          {
            "in": "query",
            "name": "mode",
            "schema": {
              "type": "string"
            },
            "description": "The import mode. In `new` mode (default), the source app will be imported as a new app.<div class=note>The `autoreplace` mode is an internal mode only and is not permitted for external use.</div>\n\nOne of:\n* NEW\n* AUTOREPLACE"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "The name of the target app."
          },
          {
            "in": "query",
            "name": "NoData",
            "schema": {
              "type": "boolean"
            },
            "description": "If NoData is true, the data of the existing app will be kept as is, otherwise it will be replaced by the new incoming data."
          },
          {
            "in": "query",
            "name": "spaceId",
            "schema": {
              "type": "string"
            },
            "description": "The space ID of the target app."
          }
        ],
        "description": "Imports an app into the system.",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/FileData"
              }
            }
          },
          "description": "Path of the source app."
        },
        "x-qlik-access-control": [
          "import"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "2",
          "limit": 100
        }
      }
    },
    "/v1/apps/privileges": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPrivileges"
                  }
                }
              }
            },
            "headers": {},
            "description": "OK"
          }
        },
        "description": "Gets the app privileges for the current user, such as create app and import app. Empty means that the current user has no app privileges.",
        "x-qlik-access-control": [
          "read"
        ],
        "x-qlik-visibility": "public",
        "x-qlik-stability": "locked",
        "x-qlik-categories": [
          "external/manage",
          "external/build"
        ],
        "x-qlik-deprecated": false,
        "x-qlik-tier": {
          "tier": "1",
          "limit": 1000
        }
      }
    }
  },
  "x-qlik-categories": [
    "external/build",
    "external/manage"
  ],
  "openapi": "3.0.0",
  "components": {
    "schemas": {
      "Analysis": {
        "enum": [
          "breakdown",
          "changePoint",
          "comparison",
          "contribution",
          "correlation",
          "fact",
          "mutualInfo",
          "rank",
          "spike",
          "trend",
          "values"
        ],
        "type": "string"
      },
      "AnalysisComposition": {
        "type": "object",
        "properties": {
          "dims": {
            "$ref": "#/components/schemas/CompositionMinMax"
          },
          "geos": {
            "$ref": "#/components/schemas/CompositionMinMax"
          },
          "msrs": {
            "$ref": "#/components/schemas/CompositionMinMax"
          },
          "items": {
            "$ref": "#/components/schemas/CompositionMinMax"
          },
          "temporals": {
            "$ref": "#/components/schemas/CompositionMinMax"
          },
          "description": {
            "type": "object",
            "properties": {
              "long": {
                "type": "string"
              },
              "short": {
                "type": "string"
              }
            }
          }
        }
      },
      "AnalysisDescriptor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "compositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalysisComposition"
            }
          },
          "supportsMasterItems": {
            "type": "boolean",
            "description": "If analysis can work with master items (default is true)"
          },
          "requiresAutoCalendarPeriod": {
            "type": "boolean",
            "description": "Used for period-specific analyses to indicate the defined or available calendar period must be of type autoCalendar"
          },
          "requiresDefinedAnalysisPeriod": {
            "type": "boolean",
            "description": "Used for period-specific analyses to indicate the measure must be associated with one or more analysis periods"
          },
          "requiresAvailableAnalysisPeriod": {
            "type": "boolean",
            "description": "Used for period-specific analyses to indicate the temporal dimension must be associated with one or more analysis periods"
          }
        }
      },
      "AnalysisDescriptorResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalysisDescriptor"
            }
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          }
        }
      },
      "AnalysisDetails": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "analysis": {
            "$ref": "#/components/schemas/Analysis"
          },
          "analysisGroup": {
            "$ref": "#/components/schemas/AnalysisGroup"
          }
        }
      },
      "AnalysisGroup": {
        "enum": [
          "anomaly",
          "brekadown",
          "comparison",
          "correl",
          "fact",
          "list",
          "mutualInfo",
          "rank"
        ],
        "type": "string"
      },
      "AnalysisModelItemField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "populated only for fields"
          },
          "isHidden": {
            "type": "boolean",
            "default": false,
            "description": "whether the field is hidden in business logic"
          },
          "classifications": {
            "$ref": "#/components/schemas/Classifications"
          },
          "simplifiedClassifications": {
            "$ref": "#/components/schemas/SimplifiedClassifications"
          }
        }
      },
      "AnalysisModelItemMasterItem": {
        "type": "object",
        "properties": {
          "libId": {
            "type": "string",
            "description": "only available for master items"
          },
          "caption": {
            "type": "string"
          },
          "isHidden": {
            "type": "boolean",
            "default": false,
            "description": "whether the master item is hidden in business logic"
          },
          "classifications": {
            "$ref": "#/components/schemas/Classifications"
          },
          "simplifiedClassifications": {
            "$ref": "#/components/schemas/SimplifiedClassifications"
          }
        }
      },
      "AnalysisModelResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalysisModelResponseDetail"
            }
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          }
        }
      },
      "AnalysisModelResponseDetail": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalysisModelItemField"
            }
          },
          "masterItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalysisModelItemMasterItem"
            }
          },
          "isLogicalModelEnabled": {
            "type": "boolean",
            "description": "if the analysis model is constructed based on a user-defined business-logic (as opposed to a default one)"
          },
          "isDefinedLogicalModelValid": {
            "type": "boolean",
            "description": "set only if previous property is true, to indicate if the business logic passes validation"
          }
        }
      },
      "AnalysisRecommendationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalysisRecommendationResponseDetail"
            }
          }
        }
      },
      "AnalysisRecommendationResponseDetail": {
        "type": "object",
        "required": [
          "recAnalyses"
        ],
        "properties": {
          "nluInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartialNluInfo"
            }
          },
          "recAnalyses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendedAnalysis"
            }
          }
        }
      },
      "AnalysisRecommendRequest": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/RecommendNaturalLangQuery"
          },
          {
            "$ref": "#/components/schemas/RecommendItems"
          }
        ],
        "description": "Request payload can be of two types, using natural language query or consist of fields or master items and optional target analysis.\nIn below examples, consider sales as a master item and product as field, so to get recommendations using sales and product,\nyou can utilize below three approaches, also you can set language parameter in headers as part of accept-language.\nExamples:\n```\n{\n  'text': 'show me sales by product'\n}\n```\n```\n{\n  'fields': [\n    {\n      'name': 'product'\n    }\n  ],\n  'libItems': [\n    {\n      libId: 'NwQfJ'\n    }\n  ]\n}\n```\n```\n{\n  'fields': [\n    {\n      'name': 'product'\n    }\n  ],\n  'libItems': [\n    {\n      'libId': 'NwQfJ'\n    }\n  ],\n  'targetAnalysis': {\n    'id': 'rank-rank'\n  }\n}\n```\n"
      },
      "AppAttributes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name (title) of the application"
          },
          "usage": {
            "$ref": "#/components/schemas/UsageEnum"
          },
          "locale": {
            "type": "string",
            "description": "Set custom locale instead of the system default"
          },
          "spaceId": {
            "type": "string",
            "description": "The space ID of the application"
          },
          "description": {
            "type": "string",
            "description": "The description of the application"
          }
        }
      },
      "AppContentList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppContentListItem"
            },
            "description": "Content list items."
          },
          "library": {
            "type": "string",
            "description": "Content library name."
          },
          "subpath": {
            "type": "string",
            "description": "Content library relative listing path. Empty in case of root listed or representing actual subpath listed."
          }
        }
      },
      "AppContentListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique content identifier."
          },
          "link": {
            "type": "string",
            "description": "Unique content link."
          },
          "name": {
            "type": "string",
            "description": "Content name."
          },
          "type": {
            "type": "string",
            "description": "Content type."
          }
        }
      },
      "AppObjectGenericType": {
        "type": "string",
        "oneOf": [
          {
            "title": "genericObject",
            "x-qlik-const": 0
          },
          {
            "title": "genericBookmark",
            "x-qlik-const": 1
          },
          {
            "title": "genericMeasure",
            "x-qlik-const": 2
          },
          {
            "title": "genericDimension",
            "x-qlik-const": 3
          },
          {
            "title": "genericVariable",
            "x-qlik-const": 4
          }
        ]
      },
      "AppUpdateAttributes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name (title) of the application."
          },
          "description": {
            "type": "string",
            "description": "The description of the application."
          }
        }
      },
      "ChartType": {
        "enum": [
          "barchart",
          "combochart",
          "distributionplot",
          "kpi",
          "linechart",
          "map",
          "scatterplot",
          "table"
        ],
        "type": "string",
        "description": "Chart type given to current recommendation"
      },
      "classification": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "diff": {
                "type": "number",
                "example": 0.5
              },
              "trend": {
                "type": "string",
                "example": "up"
              },
              "absoluteDiff": {
                "type": "number",
                "example": 2.5
              }
            }
          }
        ]
      },
      "Classifications": {
        "type": "array",
        "items": {
          "enum": [
            "dimension",
            "measure",
            "temporal",
            "city",
            "address",
            "boolean",
            "country",
            "date",
            "email",
            "geographical",
            "geoPoint",
            "geoPolygon",
            "hour",
            "latitude",
            "monetary",
            "ordinal",
            "percentage",
            "postalCode",
            "quarter",
            "stateProvince",
            "timestamp",
            "week",
            "weekDay",
            "year",
            "yearDay"
          ],
          "type": "string"
        },
        "description": "classification defines the default role that attribute can play in an analysis"
      },
      "cmpbool": {
        "allOf": [
          {
            "$ref": "#/components/schemas/classification"
          },
          {
            "type": "object",
            "properties": {
              "baseline": {
                "type": "boolean",
                "example": false
              },
              "comparison": {
                "type": "boolean",
                "example": true
              }
            }
          }
        ]
      },
      "cmpfloat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/classification"
          },
          {
            "type": "object",
            "properties": {
              "baseline": {
                "type": "number",
                "example": 1.1
              },
              "comparison": {
                "type": "number",
                "example": 2.2
              }
            }
          }
        ]
      },
      "cmpfloatWithTimeout": {
        "allOf": [
          {
            "$ref": "#/components/schemas/cmpfloat"
          },
          {
            "type": "object",
            "properties": {
              "baselineTimeoutStatusCode": {
                "type": "string",
                "example": "CALC-TIMEOUT"
              },
              "comparisonTimeoutStatusCode": {
                "type": "string",
                "example": "CALC-TIMEOUT"
              }
            }
          }
        ]
      },
      "cmpint": {
        "allOf": [
          {
            "$ref": "#/components/schemas/classification"
          },
          {
            "type": "object",
            "properties": {
              "baseline": {
                "type": "number",
                "example": 1
              },
              "comparison": {
                "type": "number",
                "example": 2
              }
            }
          }
        ]
      },
      "comparison": {
        "type": "object",
        "properties": {
          "objHeavy": {
            "$ref": "#/components/schemas/sortedcomparisonoobjheavy"
          },
          "rowCount": {
            "$ref": "#/components/schemas/cmpint"
          },
          "objNoCache": {
            "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
          },
          "sheetCount": {
            "$ref": "#/components/schemas/cmpint"
          },
          "fileSizeMib": {
            "$ref": "#/components/schemas/cmpfloat"
          },
          "objectCount": {
            "$ref": "#/components/schemas/cmpint"
          },
          "maxMemoryMib": {
            "$ref": "#/components/schemas/cmpfloat"
          },
          "sheetsCached": {
            "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
          },
          "objSlowCached": {
            "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
          },
          "objMemoryLimit": {
            "$ref": "#/components/schemas/comparisonobjMemoryLimit"
          },
          "sheetsUncached": {
            "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
          },
          "documentSizeMib": {
            "$ref": "#/components/schemas/cmpfloat"
          },
          "objSlowUncached": {
            "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
          },
          "dataModelSizeMib": {
            "$ref": "#/components/schemas/cmpfloat"
          },
          "hasSectionAccess": {
            "$ref": "#/components/schemas/cmpbool"
          },
          "topFieldsByBytes": {
            "$ref": "#/components/schemas/sortedcomparisonfields"
          },
          "topTablesByBytes": {
            "$ref": "#/components/schemas/sortedcomparisontables"
          },
          "objSingleThreaded": {
            "$ref": "#/components/schemas/sortedcomparisonobjresponsetime"
          },
          "appOpenTimeSeconds": {
            "$ref": "#/components/schemas/cmpfloat"
          }
        }
      },
      "comparisonfields": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/objecttopspec"
            },
            {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "a"
                },
                "cardinal": {
                  "$ref": "#/components/schemas/cmpint"
                },
                "byte_size": {
                  "$ref": "#/components/schemas/cmpint"
                },
                "is_system": {
                  "$ref": "#/components/schemas/cmpbool"
                },
                "total_count": {
                  "$ref": "#/components/schemas/cmpint"
                },
                "dataSourceStatus": {
                  "enum": [
                    "full",
                    "none",
                    "baselinemissing",
                    "comparisonmissing"
                  ],
                  "type": "string",
                  "example": "full"
                }
              }
            }
          ]
        }
      },
      "comparisonobjMemoryLimit": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/objectspec"
            },
            {
              "type": "object",
              "properties": {
                "dataSourceStatus": {
                  "enum": [
                    "full",
                    "none",
                    "baselinemissing",
                    "comparisonmissing"
                  ],
                  "type": "string",
                  "example": "full"
                },
                "baselineMemoryLimitStatusCode": {
                  "type": "string",
                  "example": "OUT-OF-MEMORY"
                },
                "comparisonMemoryLimitStatusCode": {
                  "type": "string",
                  "example": "OUT-OF-MEMORY"
                }
              }
            }
          ]
        }
      },
      "comparisonobjresponsetime": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/objectspec"
            },
            {
              "type": "object",
              "properties": {
                "dataSourceStatus": {
                  "enum": [
                    "full",
                    "none",
                    "baselinemissing",
                    "comparisonmissing"
                  ],
                  "type": "string",
                  "example": "full"
                },
                "responseTimeSeconds1": {
                  "$ref": "#/components/schemas/cmpfloatWithTimeout"
                },
                "responseTimeSeconds2": {
                  "$ref": "#/components/schemas/cmpfloatWithTimeout"
                }
              }
            }
          ]
        }
      },
      "comparisonoobjheavy": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/objectspec"
            },
            {
              "type": "object",
              "properties": {
                "cpuSeconds1": {
                  "$ref": "#/components/schemas/cmpfloat"
                },
                "cpuSeconds2": {
                  "$ref": "#/components/schemas/cmpfloat"
                },
                "cpuQuotient1": {
                  "$ref": "#/components/schemas/cmpfloat"
                },
                "cpuQuotient2": {
                  "$ref": "#/components/schemas/cmpfloat"
                },
                "dataSourceStatus": {
                  "enum": [
                    "full",
                    "none",
                    "baselinemissing",
                    "comparisonmissing"
                  ],
                  "type": "string",
                  "example": "full"
                }
              }
            }
          ]
        }
      },
      "comparisontables": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/objecttopspec"
            },
            {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "a"
                },
                "byte_size": {
                  "$ref": "#/components/schemas/cmpint"
                },
                "is_system": {
                  "$ref": "#/components/schemas/cmpbool"
                },
                "no_of_rows": {
                  "$ref": "#/components/schemas/cmpint"
                },
                "dataSourceStatus": {
                  "enum": [
                    "full",
                    "none",
                    "baselinemissing",
                    "comparisonmissing"
                  ],
                  "type": "string",
                  "example": "full"
                }
              }
            }
          ]
        }
      },
      "CompositionMinMax": {
        "type": "object",
        "properties": {
          "max": {
            "type": "number"
          },
          "min": {
            "type": "number"
          }
        },
        "description": "Upper and lower bounds for items of specific classification types"
      },
      "CreateApp": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/AppAttributes"
          }
        }
      },
      "DataModelMetadata": {
        "type": "object",
        "properties": {
          "usage": {
            "$ref": "#/components/schemas/UsageEnum"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldMetadata"
            },
            "description": "List of field descriptions."
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableMetadata"
            },
            "description": "List of table descriptions."
          },
          "reload_meta": {
            "$ref": "#/components/schemas/LastReloadMetadata"
          },
          "static_byte_size": {
            "type": "integer",
            "format": "int64",
            "description": "Static memory usage for the app."
          },
          "has_section_access": {
            "type": "boolean",
            "description": "If set to true, the app has section access configured."
          },
          "is_direct_query_mode": {
            "type": "boolean"
          },
          "tables_profiling_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableProfilingData"
            },
            "description": "Profiling data of the tables in the app."
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "code",
          "title"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The error code."
          },
          "meta": {
            "type": "object",
            "description": "Additional properties relating to the error."
          },
          "title": {
            "type": "string",
            "description": "Summary of the problem."
          },
          "detail": {
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem."
          },
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "type": "string",
                "description": "A JSON Pointer to the property that caused the error."
              },
              "parameter": {
                "type": "string",
                "description": "The URI query parameter that caused the error."
              }
            },
            "description": "References to the source of the error."
          }
        },
        "description": "An error object.",
        "x-qlik-visibility": "public"
      },
      "Errors": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "x-qlik-visibility": "public"
      },
      "evaluation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "string",
            "example": "5ecb5e65028d1f0001a98071"
          },
          "appId": {
            "type": "string",
            "format": "string",
            "example": "7c2ce11d-4d10-4414-a9b0-620e57298038"
          },
          "ended": {
            "type": "string",
            "format": "date-time",
            "example": "2022-02-09T06:58:40.575Z"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          },
          "result": {
            "$ref": "#/components/schemas/result"
          },
          "status": {
            "type": "string",
            "format": "string",
            "example": "finished"
          },
          "appName": {
            "type": "string",
            "format": "string",
            "example": "my app"
          },
          "details": {
            "type": "object",
            "properties": {
              "errors": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "string",
                  "example": "this is an error"
                }
              },
              "warnings": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "string",
                  "example": "this is a warning"
                }
              },
              "dedicated": {
                "type": "boolean",
                "example": false,
                "deprecated": true
              },
              "objectMetrics": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/resultentry"
                }
              },
              "engineHasCache": {
                "type": "boolean",
                "example": false
              },
              "concurrentReload": {
                "type": "boolean",
                "example": false
              }
            }
          },
          "sheetId": {
            "type": "string",
            "format": "string",
            "example": "zyb2bQTeFmPVt9TXZOS0I5GZCFn"
          },
          "started": {
            "type": "string",
            "format": "date-time",
            "example": "2022-02-09T06:58:40.575Z"
          },
          "version": {
            "type": "number",
            "example": 1
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "tenantId": {
            "type": "string",
            "format": "string",
            "example": "zyb2bQTeFmPVt9TXZOS0I5GZCFn"
          },
          "appItemId": {
            "type": "string",
            "format": "string",
            "example": "zyb2bQTeFmPVt9TXZOS0I5GZCFn"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2022-02-09T06:58:40.575Z"
          },
          "sheetTitle": {
            "type": "string",
            "format": "string",
            "example": "my sheet"
          }
        }
      },
      "evaluations": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/evaluation"
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "next": {
                "type": "object",
                "properties": {
                  "href": {
                    "$ref": "#/components/schemas/href"
                  }
                }
              },
              "prev": {
                "type": "object",
                "properties": {
                  "href": {
                    "$ref": "#/components/schemas/href"
                  }
                }
              }
            }
          }
        }
      },
      "EvaluatorError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "ERR-INVALID-AUTH"
                },
                "title": {
                  "type": "string",
                  "example": "An error occured"
                },
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "example": 427
                }
              }
            }
          }
        }
      },
      "event": {
        "type": "object",
        "properties": {
          "details": {
            "type": "string",
            "example": "An object failed"
          },
          "sheetId": {
            "type": "string",
            "example": "gregFG"
          },
          "objectId": {
            "type": "string",
            "example": "adfRFr"
          },
          "severity": {
            "type": "string",
            "example": "warning"
          },
          "errorCode": {
            "type": "string",
            "example": "ERR-GOPHERCISER"
          },
          "objectType": {
            "type": "string",
            "example": "linechart"
          },
          "sheetTitle": {
            "type": "string",
            "example": "mysheet"
          },
          "objectTitle": {
            "type": "string",
            "example": "profit"
          },
          "objectVisualization": {
            "type": "string",
            "example": "linechart"
          }
        }
      },
      "FieldAttributes": {
        "type": "object",
        "properties": {
          "Dec": {
            "type": "string",
            "description": "Defines the decimal separator.\nExample: **.**"
          },
          "Fmt": {
            "type": "string",
            "description": "Defines the format pattern that applies to _qText_ .\nIs used in connection to the type of the field (parameter **qType** ).\nFor more information, see _Formatting mechanism_.\nExample: _YYYY-MM-DD_ for a date."
          },
          "Thou": {
            "type": "string",
            "description": "Defines the thousand separator (if any).\nIs used if **qUseThou** is set to 1.\nExample: **,**"
          },
          "Type": {
            "$ref": "#/components/schemas/FieldAttrType"
          },
          "nDec": {
            "type": "integer",
            "format": "int32",
            "default": 10,
            "description": "Number of decimals.\nDefault is 10."
          },
          "UseThou": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Defines whether or not a thousands separator must be used.\nDefault is 0."
          }
        },
        "description": "Sets the formatting of a field.\nThe properties of _qFieldAttributes_ and the formatting mechanism are described below.\n\n### Formatting mechanism\nThe formatting mechanism depends on the type set in _qType,_ as shown below:\n<div class=note>In case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.</div>\n\n### Type is DATE, TIME, TIMESTAMP or INTERVAL\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the formatting is as defined in _qFmt_ .\n* If _qFmt_ is empty, the formatting is defined by the number interpretation variables included at the top of the script ( _TimeFormat_ , _DateFormat_ , _TimeStampFormat_ ).\n* The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.\n\n### Type is INTEGER\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , no formatting is applied. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ and the number interpretation variables defined in the script are not used .\n\n### Type is REAL\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.\n* If no format pattern is defined in _qFmt_ , and if _qnDec_ is defined and not 0, the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n* If no format pattern is defined in _qFmt_ , and if _qnDec_ is 0, the number of decimals is 14 and the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n\n### Type is FIX\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , the properties _qDec_ and _qnDec_ are used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n\n### Type is MONEY\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , the engine uses the number interpretation variables included at the top of the script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).\n\n### Type is ASCII\nNo formatting, _qFmt_ is ignored."
      },
      "FieldAttrType": {
        "type": "string",
        "oneOf": [
          {
            "title": "U",
            "description": "UNKNOWN",
            "x-qlik-const": 0
          },
          {
            "title": "A",
            "description": "ASCII",
            "x-qlik-const": 1
          },
          {
            "title": "I",
            "description": "INTEGER",
            "x-qlik-const": 10
          },
          {
            "title": "R",
            "description": "REAL",
            "x-qlik-const": 2
          },
          {
            "title": "F",
            "description": "FIX",
            "x-qlik-const": 11
          },
          {
            "title": "M",
            "description": "MONEY",
            "x-qlik-const": 12
          },
          {
            "title": "D",
            "description": "DATE",
            "x-qlik-const": 3
          },
          {
            "title": "T",
            "description": "TIME",
            "x-qlik-const": 4
          },
          {
            "title": "TS",
            "description": "TIMESTAMP",
            "x-qlik-const": 5
          },
          {
            "title": "IV",
            "description": "INTERVAL",
            "x-qlik-const": 6
          }
        ]
      },
      "FieldInTableProfilingData": {
        "type": "object",
        "properties": {
          "Max": {
            "type": "number",
            "format": "double",
            "description": "Maximum value of numerical values. NaN otherwise."
          },
          "Min": {
            "type": "number",
            "format": "double",
            "description": "Minimum value of numerical values. NaN otherwise."
          },
          "Std": {
            "type": "number",
            "format": "double",
            "description": "Standard deviation of numerical values. NaN otherwise."
          },
          "Sum": {
            "type": "number",
            "format": "double",
            "description": "Sum of all numerical values. NaN otherwise."
          },
          "Name": {
            "type": "string",
            "description": "Name of the field."
          },
          "Sum2": {
            "type": "number",
            "format": "double",
            "description": "Squared sum of all numerical values. NaN otherwise."
          },
          "Median": {
            "type": "number",
            "format": "double",
            "description": "Median of all numerical values. NaN otherwise."
          },
          "Average": {
            "type": "number",
            "format": "double",
            "description": "Average of all numerical values. NaN otherwise."
          },
          "Kurtosis": {
            "type": "number",
            "format": "double",
            "description": "Kurtosis of the numerical values. NaN otherwise."
          },
          "Skewness": {
            "type": "number",
            "format": "double",
            "description": "Skewness of the numerical values. NaN otherwise."
          },
          "FieldTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tags related to the field."
          },
          "Fractiles": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "The .01, .05, .1, .25, .5, .75, .9, .95, .99 fractiles. Array of NaN otherwise."
          },
          "NegValues": {
            "type": "integer",
            "format": "int64",
            "description": "Number of negative values"
          },
          "PosValues": {
            "type": "integer",
            "format": "int64",
            "description": "Number of positive values"
          },
          "LastSorted": {
            "type": "string",
            "description": "For textual values the last sorted string."
          },
          "NullValues": {
            "type": "integer",
            "format": "int64",
            "description": "Number of null values"
          },
          "TextValues": {
            "type": "integer",
            "format": "int64",
            "description": "Number of textual values"
          },
          "ZeroValues": {
            "type": "integer",
            "format": "int64",
            "description": "Number of zero values for numerical values"
          },
          "FirstSorted": {
            "type": "string",
            "description": "For textual values the first sorted string."
          },
          "AvgStringLen": {
            "type": "number",
            "format": "double",
            "description": "Average string length of textual values. 0 otherwise."
          },
          "DataEvenness": {
            "type": "number",
            "format": "double",
            "description": "Data evenness aka Shannon's entropy normalized to [0,1]"
          },
          "EmptyStrings": {
            "type": "integer",
            "format": "int64",
            "description": "Number of empty strings"
          },
          "MaxStringLen": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum string length of textual values. 0 otherwise."
          },
          "MinStringLen": {
            "type": "integer",
            "format": "int64",
            "description": "Minimum string length of textual values. 0 otherwise."
          },
          "MostFrequent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SymbolFrequency"
            },
            "description": "Three most frequent values and their frequencies"
          },
          "NumberFormat": {
            "$ref": "#/components/schemas/FieldAttributes"
          },
          "SumStringLen": {
            "type": "integer",
            "format": "int64",
            "description": "Sum of all characters in strings in the field"
          },
          "NumericValues": {
            "type": "integer",
            "format": "int64",
            "description": "Number of numeric values"
          },
          "DistinctValues": {
            "type": "integer",
            "format": "int64",
            "description": "Number of distinct values"
          },
          "DistinctTextValues": {
            "type": "integer",
            "format": "int64",
            "description": "Number of distinct text values"
          },
          "DistinctNumericValues": {
            "type": "integer",
            "format": "int64",
            "description": "Number of distinct numeric values"
          },
          "FrequencyDistribution": {
            "$ref": "#/components/schemas/FrequencyDistributionData"
          }
        }
      },
      "FieldMetadata": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Hash of the data in the field. If the data in a reload is the same, the hash will be consistent."
          },
          "name": {
            "type": "string",
            "description": "Name of the field."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII."
          },
          "comment": {
            "type": "string",
            "description": "Field comment."
          },
          "cardinal": {
            "type": "integer",
            "format": "int32",
            "description": "Number of distinct field values."
          },
          "byte_size": {
            "type": "integer",
            "format": "int64",
            "description": "Static RAM memory used in bytes."
          },
          "is_hidden": {
            "type": "boolean",
            "description": "If set to true, the field is hidden.\nThe default value is false."
          },
          "is_locked": {
            "type": "boolean",
            "description": "If set to true, the field is locked.\nThe default value is false."
          },
          "is_system": {
            "type": "boolean",
            "description": "If set to true, the field is a system field.\nThe default value is false."
          },
          "is_numeric": {
            "type": "boolean",
            "description": "Is set to true if the value is a numeric.\nThe default value is false."
          },
          "src_tables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of table names."
          },
          "is_semantic": {
            "type": "boolean",
            "description": "If set to true, the field is semantic.\nThe default value is false."
          },
          "total_count": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of field values."
          },
          "distinct_only": {
            "type": "boolean",
            "description": "If set to true, only distinct field values are shown.\nThe default value is false."
          },
          "always_one_selected": {
            "type": "boolean",
            "description": "If set to true, the field has one and only one selection (not 0 and not more than 1).\nIf this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.\nThe default value is false."
          }
        }
      },
      "FieldOverride": {
        "type": "object",
        "properties": {
          "classifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultAggregation": {
            "type": "string"
          }
        },
        "x-qlik-visibility": "public"
      },
      "FileData": {
        "type": "string",
        "format": "binary"
      },
      "Filter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "c61841ac-7b35-4434-aa74-4421f10fc68e",
            "readOnly": true,
            "description": "The filter ID (bookmarkId)."
          },
          "name": {
            "type": "string",
            "example": "Filter 1",
            "description": "The filter name.",
            "x-qlik-filterable": true
          },
          "ownerId": {
            "type": "string",
            "example": "649173fbc8ffcfde27412b99",
            "description": "The user that owns the filter, if missing the same as the request user."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-09T08:19:37.577Z",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-09T08:19:37.577Z",
            "readOnly": true
          },
          "filterType": {
            "$ref": "#/components/schemas/FilterType"
          },
          "filterV1_0": {
            "$ref": "#/components/schemas/FilterV1_0"
          },
          "description": {
            "type": "string",
            "example": "This is the filter description",
            "description": "The filter description.",
            "x-qlik-filterable": true
          },
          "filterVersion": {
            "enum": [
              "filter-1.0",
              "filter-2.0"
            ],
            "type": "string"
          }
        }
      },
      "FilterError": {
        "type": "object",
        "required": [
          "code",
          "title"
        ],
        "properties": {
          "code": {
            "type": "string",
            "example": "REP-400000",
            "description": "The unique code for the error\n\n- \"REP-400000\" Bad request. The server could not understand the request due to invalid syntax.\n- \"REP-400008\" Selections error.\n- \"REP-400015\" Bad request in enigma request. The patch value has invalid JSON format.\n- \"REP-401000\" Unauthorized. The client must authenticate itself to get the requested response.\n- \"REP-401001\" Unauthorized, bad JWT.\n- \"REP-403000\" Forbidden. The client does not have access rights to the content.\n- \"REP-403001\" App forbidden, the user does not have read permission on the app.\n- \"REP-403002\" Chart type not supported.\n- \"REP-404000\" Not found. The server can not find the requested resource.\n- \"REP-409043\" Filter name conflict. The filter name must be unique.\n- \"REP-429000\" Too many request. The user has sent too many requests in a given amount of time (\"rate limiting\").\n- \"REP-429012\" Exceeded max session tenant quota. A tenant has opened too many different sessions at the same time.\n- \"REP-429016\" Exceeded max session tenant quota per day.\n- \"REP-500000\" Fail to resolve resource.\n- \"REP-503005\" Engine unavailable, qix-sessions error no engines available.\n- \"REP-503013\" Session unavailable. The engine session used to create the report is unavailable.\n- \"REP-504042\" Context deadline exceeded applying selections of the Filter.\n- \"REP-500031\" Error creating bookmark.\n- \"REP-404032\" Bookmark not found after creating the bookmark.\n- \"REP-500033\" Error destroying bookmark.\n- \"REP-404033\" Bookmark not found destroying the bookmark.\n- \"REP-409043\" Dupliacate bookmark name.\n- \"REP-429034\" Filters quota exceeded.\n- \"REP-400044\" Missing or renamed field.\n- \"REP-403049\" Report filter access not allowed.\n"
          },
          "title": {
            "type": "string",
            "example": "Bad request. The server could not understand the request due to invalid syntax.",
            "description": "A summary in english explaining what went wrong."
          }
        },
        "description": "Error occured during the Filter creation."
      },
      "FilterErrors": {
        "type": "object",
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterError"
            }
          }
        },
        "description": "Errors occured during the Filter creation."
      },
      "FilterField": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Region"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "minItems": 1,
            "description": "The filter values."
          },
          "description": {
            "type": "string",
            "example": "This is the filter description",
            "x-nullable": true,
            "description": "Gets the resource description."
          },
          "overrideValues": {
            "type": "boolean",
            "example": false
          },
          "selectExcluded": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "FilterFieldValue": {
        "type": "object",
        "properties": {
          "valueType": {
            "enum": [
              "string",
              "number",
              "evaluate",
              "search"
            ],
            "type": "string",
            "example": "string"
          },
          "valueAsText": {
            "type": "string",
            "example": "2001"
          },
          "valueAsNumber": {
            "$ref": "#/components/schemas/Float64"
          }
        }
      },
      "FilterItemPatch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Filter 1",
            "description": "The filter name."
          },
          "ownerId": {
            "type": "string",
            "example": "649173fbc8ffcfde27412b99",
            "description": "The user that owns the filter, if missing the same as the request user."
          },
          "filterV1_0": {
            "$ref": "#/components/schemas/FilterV1_0"
          },
          "description": {
            "type": "string",
            "example": "This is the filter description",
            "description": "The filter description."
          },
          "filterVersion": {
            "enum": [
              "filter-1.0",
              "filter-2.0"
            ],
            "type": "string"
          }
        }
      },
      "FilterList": {
        "type": "object",
        "readOnly": true,
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterListItem"
            },
            "description": "a list of filters containing all the filters properties (like name,description...) except the filter definition (like FilterV1_0)"
          },
          "links": {
            "$ref": "#/components/schemas/LinksResponse"
          }
        }
      },
      "FilterListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "c61841ac-7b35-4434-aa74-4421f10fc68e",
            "readOnly": true,
            "description": "The filter ID (bookmarkId)"
          },
          "name": {
            "type": "string",
            "example": "Filter 1",
            "readOnly": true,
            "description": "The filter name."
          },
          "ownerId": {
            "type": "string",
            "example": "649173fbc8ffcfde27412b99",
            "readOnly": true,
            "description": "The user that owns the filter, if missing the same as the request user."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-09T08:19:37.577Z",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-09T08:19:37.577Z",
            "readOnly": true
          },
          "filterType": {
            "$ref": "#/components/schemas/FilterType"
          },
          "filterV1_0": {
            "$ref": "#/components/schemas/FilterV1_0"
          },
          "description": {
            "type": "string",
            "example": "This is the filter description",
            "readOnly": true,
            "description": "The filter description."
          },
          "filterVersion": {
            "enum": [
              "filter-1.0",
              "filter-2.0"
            ],
            "type": "string",
            "readOnly": true
          }
        }
      },
      "FilterRequest": {
        "example": {
          "name": "Filter sample",
          "filterType": "REP",
          "filterV1_0": {
            "fieldsByState": {
              "$": [
                {
                  "name": "Country",
                  "values": [
                    {
                      "valueType": "string",
                      "valueAsText": "1-Argentina"
                    },
                    {
                      "valueType": "string",
                      "valueAsText": "4-Brazil"
                    }
                  ],
                  "overrideValues": false,
                  "selectExcluded": false
                },
                {
                  "name": "Order number",
                  "values": [
                    {
                      "valueType": "number",
                      "valueAsText": "61300",
                      "valueAsNumber": 61300
                    }
                  ],
                  "overrideValues": false,
                  "selectExcluded": false
                }
              ]
            }
          },
          "description": "this is a filter sample",
          "filterVersion": "filter-1.0"
        },
        "required": [
          "name",
          "filterType",
          "filterVersion"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Filter 1",
            "description": "The filter name."
          },
          "appId": {
            "type": "string",
            "example": "1a60c348-4bc6-428a-b4e6-03bde68a5c19",
            "description": "The App ID."
          },
          "ownerId": {
            "type": "string",
            "example": "649173fbc8ffcfde27412b99",
            "description": "The user that owns the filter, if missing the same as the request user."
          },
          "filterType": {
            "$ref": "#/components/schemas/FilterType"
          },
          "filterV1_0": {
            "$ref": "#/components/schemas/FilterV1_0"
          },
          "description": {
            "type": "string",
            "example": "This is the filter description",
            "x-nullable": true,
            "description": "The filter description."
          },
          "filterVersion": {
            "enum": [
              "filter-1.0",
              "filter-2.0"
            ],
            "type": "string"
          }
        }
      },
      "FiltersCount": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "format": "int32",
            "example": 20,
            "readOnly": true,
            "description": "The total number of filters."
          }
        }
      },
      "FilterType": {
        "enum": [
          "REP",
          "SUB"
        ],
        "type": "string"
      },
      "FilterV1_0": {
        "type": "object",
        "example": {
          "fieldsByState": {
            "$": [
              {
                "name": "Country",
                "values": [
                  {
                    "valueType": "string",
                    "valueAsText": "1-Argentina"
                  },
                  {
                    "valueType": "string",
                    "valueAsText": "4-Brazil"
                  }
                ],
                "overrideValues": false,
                "selectExcluded": false
              },
              {
                "name": "Order number",
                "values": [
                  {
                    "valueType": "number",
                    "valueAsText": "61300",
                    "valueAsNumber": 61300
                  }
                ],
                "overrideValues": false,
                "selectExcluded": false
              }
            ]
          }
        },
        "properties": {
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterVariable"
            },
            "description": "The filter variables."
          },
          "fieldsByState": {
            "type": "object",
            "description": "Map of fields to apply by state. Maximum number of states allowed is 125. Maximum number of fields allowed is 125 and maximum number of overall field values allowed is 150000.",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FilterField"
              },
              "maxItems": 125
            }
          }
        }
      },
      "FilterVariable": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "variable 1"
          },
          "value": {
            "type": "string",
            "example": "v1"
          },
          "evaluate": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Float64": {
        "type": "number",
        "format": "float64",
        "x-go-type": {
          "type": "Float64",
          "import": {
            "alias": "cModels",
            "package": "github.com/qlik-trial/reporting-service/v10/pkg/models"
          }
        }
      },
      "FrequencyDistributionData": {
        "type": "object",
        "properties": {
          "BinsEdges": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "Bins edges."
          },
          "Frequencies": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Bins frequencies."
          },
          "NumberOfBins": {
            "type": "integer",
            "format": "int32",
            "description": "Number of bins."
          }
        }
      },
      "HardwareMeta": {
        "type": "object",
        "properties": {
          "total_memory": {
            "type": "integer",
            "format": "int64",
            "description": "RAM available."
          },
          "logical_cores": {
            "type": "integer",
            "format": "int32",
            "description": "Number of logical cores available."
          }
        }
      },
      "href": {
        "type": "string",
        "example": "/api/v1/evaluations/appId=a84c22cf-31e5-41fe-9e8f-544b85513484&prev=5f5201908b3fc5fc132dbd35"
      },
      "Href": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "example": "http://example.com"
          }
        }
      },
      "JsonObject": {
        "type": "object",
        "description": "Contains dynamic JSON data specified by the client."
      },
      "LastReloadMetadata": {
        "type": "object",
        "properties": {
          "hardware": {
            "$ref": "#/components/schemas/HardwareMeta"
          },
          "cpu_time_spent_ms": {
            "type": "integer",
            "format": "int64",
            "description": "Number of CPU milliseconds it took to reload the app."
          },
          "peak_memory_bytes": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of bytes used during reload of the app."
          },
          "fullReloadPeakMemoryBytes": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of bytes used during full reload of the app."
          },
          "partialReloadPeakMemoryBytes": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of bytes used during partial reload of the app."
          }
        }
      },
      "LineageInfoRest": {
        "type": "object",
        "properties": {
          "statement": {
            "type": "string",
            "description": "The LOAD and SELECT script statements from the data load script."
          },
          "discriminator": {
            "type": "string",
            "description": "A string indicating the origin of the data:\n* [filename]: the data comes from a local file.\n* INLINE: the data is entered inline in the load script.\n* RESIDENT: the data comes from a resident table. The table name is listed.\n* AUTOGENERATE: the data is generated from the load script (no external table of data source).\n* Provider: the data comes from a data connection. The connector source name is listed.\n* [webfile]: the data comes from a web-based file.\n* STORE: path to QVD or TXT file where data is stored.\n* EXTENSION: the data comes from a Server Side Extension (SSE)."
          }
        }
      },
      "LinkResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "example": "https://tenant.qlik-cloud.com:443/api/v1/apps/816e23e1-03d2-446b-8721-cdee6b5e59cf/report-filters?filter=&filterTypes=REP&filterTypes=REP&limit=20&page=0&sort=%2Bname",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Links": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/Href"
          },
          "prev": {
            "$ref": "#/components/schemas/Href"
          },
          "self": {
            "$ref": "#/components/schemas/Href"
          }
        }
      },
      "LinksResponse": {
        "type": "object",
        "example": {
          "next": {
            "href": "https://tenant.qlik-cloud.com:443/api/v1/apps/816e23e1-03d2-446b-8721-cdee6b5e59cf/report-filters?filter=&filterTypes=REP&filterTypes=REP&limit=20&page=0&sort=%2Bname"
          },
          "prev": {
            "href": "https://tenant.qlik-cloud.com:443/api/v1/apps/816e23e1-03d2-446b-8721-cdee6b5e59cf/report-filters?filter=&filterTypes=REP&filterTypes=REP&limit=20&page=0&sort=%2Bname"
          },
          "self": {
            "href": "https://tenant.qlik-cloud.com:443/api/v1/apps/816e23e1-03d2-446b-8721-cdee6b5e59cf/report-filters?filter=&filterTypes=REP&filterTypes=REP&limit=20&page=0&sort=%2Bname"
          }
        },
        "required": [
          "next",
          "prev",
          "self"
        ],
        "properties": {
          "next": {
            "$ref": "#/components/schemas/LinkResponse"
          },
          "prev": {
            "$ref": "#/components/schemas/LinkResponse"
          },
          "self": {
            "$ref": "#/components/schemas/LinkResponse"
          }
        },
        "additionalProperties": false
      },
      "Log": {
        "type": "object",
        "properties": {
          "log": {
            "type": "string",
            "description": "Provides a link to download the log file."
          }
        }
      },
      "metadata": {
        "type": "object",
        "properties": {
          "reloadmeta": {
            "type": "object",
            "properties": {
              "cpuspent": {
                "type": "number",
                "example": "123983"
              },
              "peakmemorybytes": {
                "type": "number",
                "example": 112
              }
            }
          },
          "amountofrows": {
            "type": "number",
            "example": 1423423234
          },
          "amountoffields": {
            "type": "number",
            "example": 12
          },
          "amountoftables": {
            "type": "number",
            "example": 7
          },
          "staticbytesize": {
            "type": "number",
            "example": 1444234
          },
          "hassectionaccess": {
            "type": "boolean",
            "example": false
          },
          "amountoffieldvalues": {
            "type": "number",
            "example": 144423433
          },
          "amountofcardinalfieldvalues": {
            "type": "number",
            "example": 14442
          }
        }
      },
      "NavigationLink": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string"
          }
        }
      },
      "NavigationLinks": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/NavigationLink"
          },
          "prev": {
            "$ref": "#/components/schemas/NavigationLink"
          }
        }
      },
      "numberFormat": {
        "type": "object",
        "properties": {
          "qDec": {
            "type": "string"
          },
          "qFmt": {
            "type": "string"
          },
          "qThou": {
            "type": "string"
          },
          "qType": {
            "type": "string"
          },
          "qnDec": {
            "type": "number"
          },
          "qUseThou": {
            "type": "number"
          }
        }
      },
      "NxApp": {
        "type": "object",
        "properties": {
          "create": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NxAppCreatePrivileges"
            },
            "description": "Object create privileges. Hints to the client what type of objects the user is allowed to create."
          },
          "attributes": {
            "$ref": "#/components/schemas/NxAttributes"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Application privileges.\nHints to the client what actions the user is allowed to perform.\nCould be any of:\n* read\n* create\n* update\n* delete\n* reload\n* import\n* publish\n* duplicate\n* export\n* exportdata\n* change_owner\n* change_space"
          }
        },
        "description": "Application attributes and user privileges."
      },
      "NxAppCreatePrivileges": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string",
            "description": "Type of resource. For example, sheet, story, bookmark, etc."
          },
          "canCreate": {
            "type": "boolean",
            "description": "Is set to true if the user has privileges to create the resource."
          }
        }
      },
      "NxAppObject": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/NxObjectAttributes"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Application object privileges.\nHints to the client what actions the user is allowed to perform.\nCould be any of:\n* read\n* create\n* update\n* delete\n* publish\n* exportdata\n* change_owner"
          }
        },
        "description": "Application object attributes and user privileges."
      },
      "NxAttributes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The App ID."
          },
          "name": {
            "type": "string",
            "description": "App name."
          },
          "owner": {
            "type": "string",
            "description": "Deprecated. Use the Users API to fetch user metadata.",
            "x-qlik-deprecated": true
          },
          "usage": {
            "$ref": "#/components/schemas/UsageEnum"
          },
          "custom": {
            "$ref": "#/components/schemas/JsonObject"
          },
          "ownerId": {
            "type": "string",
            "description": "Identifier of the app owner."
          },
          "encrypted": {
            "type": "boolean",
            "description": "If set to true, the app is encrypted."
          },
          "published": {
            "type": "boolean",
            "description": "True if the app is published on-prem, distributed in QCS, false if not."
          },
          "thumbnail": {
            "type": "string",
            "description": "App thumbnail."
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the app was created."
          },
          "description": {
            "type": "string",
            "description": "App description."
          },
          "originAppId": {
            "type": "string",
            "description": "The Origin App ID for published apps."
          },
          "publishTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the app was published, empty if unpublished."
          },
          "dynamicColor": {
            "type": "string",
            "description": "The dynamic color of the app."
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the app was modified."
          },
          "lastReloadTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the last reload of the app."
          },
          "hasSectionAccess": {
            "type": "boolean",
            "description": "If set to true, the app has section access configured,"
          },
          "isDirectQueryMode": {
            "type": "boolean",
            "description": "True if the app is a Direct Query app, false if not"
          }
        },
        "description": "App attributes. This structure can also contain extra user-defined attributes."
      },
      "NxObjectAttributes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The object Id."
          },
          "name": {
            "type": "string",
            "description": "Object name."
          },
          "ownerId": {
            "type": "string",
            "description": "The object owner's Id."
          },
          "approved": {
            "type": "boolean",
            "description": "True if the object is approved."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the object was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the object was modified."
          },
          "objectType": {
            "type": "string",
            "description": "The type of the object."
          },
          "description": {
            "type": "string",
            "description": "Object description."
          },
          "genericType": {
            "$ref": "#/components/schemas/AppObjectGenericType"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the object was published, empty if unpublished."
          }
        },
        "description": "App object attributes. This structure can also contain extra user-defined attributes."
      },
      "NxPatch": {
        "type": "object",
        "properties": {
          "Op": {
            "$ref": "#/components/schemas/NxPatchOperationType"
          },
          "Path": {
            "type": "string",
            "description": "Path to the property to add, remove or replace."
          },
          "Value": {
            "type": "string",
            "description": "This parameter is not used in a remove operation.\nCorresponds to the value of the property to add or to the new value of the property to update.\nExamples:\n\"false\", \"2\", \"\\\"New title\\\"\""
          }
        }
      },
      "NxPatchOperationType": {
        "type": "string",
        "oneOf": [
          {
            "title": "add",
            "description": "Add",
            "x-qlik-const": 0
          },
          {
            "title": "remove",
            "description": "Remove",
            "x-qlik-const": 1
          },
          {
            "title": "replace",
            "description": "Replace",
            "x-qlik-const": 2
          }
        ]
      },
      "objectmetrics": {
        "type": "object",
        "properties": {
          "cpuSeconds": {
            "type": "array",
            "items": {
              "type": "number",
              "example": 12.3
            }
          },
          "cpuQuotients": {
            "type": "array",
            "items": {
              "type": "number",
              "example": 12.3
            }
          },
          "responseTimeSeconds": {
            "type": "number",
            "example": 234.3
          }
        }
      },
      "objectspec": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "string",
            "example": "fjETFn"
          },
          "title": {
            "type": "string",
            "format": "string",
            "example": "my chart"
          },
          "sheetId": {
            "type": "string",
            "format": "string",
            "example": "41dbb01c-d1bd-4528-be05-910ee565988b"
          },
          "objectType": {
            "type": "string",
            "example": "table"
          }
        }
      },
      "objecttopspec": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "format": "string",
            "example": "some field/table"
          },
          "byte_size": {
            "type": "number",
            "example": 12873
          },
          "is_system": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "PartialNluInfo": {
        "properties": {
          "role": {
            "enum": [
              "dimension",
              "measure",
              "date"
            ],
            "type": "string",
            "description": "Role of the token or phrase from query"
          },
          "text": {
            "type": "string",
            "description": "Matching token or phrase from query"
          },
          "type": {
            "enum": [
              "field",
              "filter",
              "master_dimension",
              "master_measure",
              "custom_analysis"
            ],
            "type": "string",
            "description": "Type of token from query"
          },
          "fieldName": {
            "type": "string",
            "description": "Qlik sense application field selected for given token or phrase"
          },
          "fieldValue": {
            "type": "string",
            "description": "Filter value found from query"
          }
        },
        "description": "Contains break down of the asked question in the form of tokens with their classification."
      },
      "PatchFilter": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PatchFilterItem"
        }
      },
      "PatchFilterItem": {
        "type": "object",
        "required": [
          "op",
          "path",
          "value"
        ],
        "properties": {
          "op": {
            "enum": [
              "replace"
            ],
            "type": "string",
            "description": "operation (replace)."
          },
          "path": {
            "enum": [
              "/filter"
            ],
            "type": "string",
            "description": "A JSON Pointer path (/)."
          },
          "value": {
            "type": "object",
            "properties": {
              "Filter": {
                "$ref": "#/components/schemas/FilterItemPatch"
              }
            },
            "description": "The value to be used for this operation. The properties that cannot be patched include id, filterType, appId"
          }
        },
        "additionalProperties": false
      },
      "PublishApp": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PublishData"
          },
          "moveApp": {
            "type": "boolean",
            "default": false,
            "description": "The original is moved instead of copied. The current published state of all objects is kept."
          },
          "spaceId": {
            "type": "string",
            "description": "The managed space ID where the app will be published."
          },
          "attributes": {
            "$ref": "#/components/schemas/AppUpdateAttributes"
          },
          "originAppId": {
            "type": "string",
            "description": "If app is moved, originAppId needs to be provided."
          }
        }
      },
      "PublishData": {
        "type": "string",
        "oneOf": [
          {
            "title": "source",
            "x-qlik-const": 0
          },
          {
            "title": "target",
            "x-qlik-const": 1
          }
        ]
      },
      "RecommendedAnalysis": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RecommendedAnalysisCore"
          },
          {
            "type": "object",
            "properties": {
              "parts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RecommendedAnalysisCore"
                },
                "description": "part analyses (only for macro analyses)"
              }
            }
          }
        ]
      },
      "RecommendedAnalysisCore": {
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "(chart options + hypercube definition)"
          },
          "analysis": {
            "$ref": "#/components/schemas/AnalysisDetails"
          },
          "chartType": {
            "$ref": "#/components/schemas/ChartType"
          },
          "relevance": {
            "type": "number",
            "description": "percentage of selected items in the analysis to the overall items passed to the endpoint"
          }
        }
      },
      "RecommendFieldItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "overrides": {
            "$ref": "#/components/schemas/FieldOverride"
          }
        },
        "description": "structure for providing fields in recommendation request, user can retrieve the fields using insight-analyses/model endpoint\n"
      },
      "RecommendItems": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendFieldItem"
            }
          },
          "libItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendMasterItem"
            }
          },
          "targetAnalysis": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "id of the target analysis, returned by the GET insight-analyses endpoint"
              }
            }
          }
        }
      },
      "RecommendMasterItem": {
        "type": "object",
        "properties": {
          "libId": {
            "type": "string"
          },
          "overrides": {
            "type": "object",
            "properties": {
              "format": {
                "$ref": "#/components/schemas/numberFormat"
              }
            }
          }
        },
        "description": "structure for providing master items in recommendation request, user can retrieve the libId of master item using insight-analyses/model endpoint\n"
      },
      "RecommendNaturalLangQuery": {
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "description": "The NL query."
          }
        }
      },
      "ReloadIncludeFile": {
        "type": "object",
        "properties": {
          "qri": {
            "type": "string",
            "description": "File QRI resource identifier."
          },
          "path": {
            "type": "string",
            "description": "File location within the connection."
          },
          "connection": {
            "type": "string",
            "description": "The connection name."
          }
        }
      },
      "ReloadListMetadata": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReloadMeta"
            },
            "description": "Array of ReloadMeta."
          }
        }
      },
      "ReloadMeta": {
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time when reload ended."
          },
          "success": {
            "type": "boolean",
            "description": "true if the reload was successful."
          },
          "duration": {
            "type": "integer",
            "format": "int64",
            "description": "Duration of reload (ms)."
          },
          "reloadId": {
            "type": "string",
            "description": "Reload identifier."
          },
          "rowLimit": {
            "type": "integer",
            "format": "int64",
            "default": -1,
            "description": "If greater than or equal 0, defines max number of rows loaded from a data source."
          },
          "appDbHash": {
            "type": "string",
            "description": "A Base64-encoded hash value of the new app database."
          },
          "skipStore": {
            "type": "boolean",
            "default": false,
            "description": "Set to true to skip Store statements.\nThe default value is false."
          },
          "storeHash": {
            "type": "string",
            "description": "A Base64-encoded hash value of all fields stored via the store statements."
          },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReloadStatements"
            },
            "description": "List of external loaded or stored statements."
          },
          "accessDbHash": {
            "type": "string",
            "description": "A Base64-encoded hash value of the new section access database."
          },
          "includeFiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReloadIncludeFile"
            },
            "description": "Files brought into the script via include/mustInclude macros."
          },
          "loadFilesBytes": {
            "type": "integer",
            "format": "int64"
          },
          "isPartialReload": {
            "type": "boolean",
            "description": "True if the reload is a partial reload."
          },
          "storeFilesBytes": {
            "type": "integer",
            "format": "int64"
          },
          "loadExternalBytes": {
            "type": "integer",
            "format": "int64"
          },
          "loadDataFilesBytes": {
            "type": "integer",
            "format": "int64"
          },
          "storeDataFilesBytes": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ReloadStatements": {
        "type": "object",
        "properties": {
          "qri": {
            "type": "string",
            "description": "Resource Identifier."
          },
          "type": {
            "type": "string",
            "description": "Type of statement, e.g. Store/Load."
          },
          "label": {
            "type": "string",
            "description": "Label of the resource level node in lineage."
          },
          "dataSize": {
            "type": "integer",
            "format": "int64",
            "description": "Data loaded from the network (bytes)."
          },
          "duration": {
            "type": "integer",
            "format": "int64",
            "description": "Duration of data generation (ms)."
          },
          "nbrOfRows": {
            "type": "integer",
            "format": "int64",
            "description": "Number of rows loaded."
          },
          "tableName": {
            "type": "string",
            "description": "Name of the source table in lineage."
          },
          "connection": {
            "type": "string",
            "description": "The connecton name."
          },
          "nbrOfFields": {
            "type": "integer",
            "format": "int64",
            "description": "Number of fields loaded."
          },
          "connectionId": {
            "type": "string",
            "description": "Connection ID."
          },
          "partialReloadOperation": {
            "type": "string",
            "description": "Partial load operation. e.g. add/replace/update/merge. n/a when not in partial load mode."
          }
        }
      },
      "RepublishApp": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PublishData"
          },
          "targetId": {
            "type": "string",
            "description": "The target ID to be republished."
          },
          "attributes": {
            "$ref": "#/components/schemas/AppUpdateAttributes"
          },
          "checkOriginAppId": {
            "type": "boolean",
            "default": true,
            "description": "Validate that source app is same as originally published."
          }
        }
      },
      "result": {
        "type": "object",
        "properties": {
          "sheets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resultobjsheet"
            }
          },
          "rowCount": {
            "type": "number",
            "example": 20000
          },
          "objNoCache": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resultobjresponsetime"
            }
          },
          "sheetCount": {
            "type": "number",
            "example": 5
          },
          "objectCount": {
            "type": "number",
            "example": 33
          },
          "objSlowCached": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resultobjresponsetime"
            }
          },
          "objMemoryLimit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resultobjMemoryLimit"
            }
          },
          "documentSizeMiB": {
            "type": "number",
            "example": 12.3
          },
          "objSlowUncached": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resultobjresponsetime"
            }
          },
          "hasSectionAccess": {
            "type": "boolean",
            "example": false
          },
          "topFieldsByBytes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resultmetadatatopfields"
            }
          },
          "topTablesByBytes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resultmetadatatoptables"
            }
          },
          "objSingleThreaded": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resultsingle"
            }
          }
        }
      },
      "resultentry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/objectspec"
          },
          {
            "type": "object",
            "properties": {
              "passes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/objectmetrics"
                }
              }
            }
          }
        ]
      },
      "resultmetadatatopfields": {
        "allOf": [
          {
            "$ref": "#/components/schemas/objecttopspec"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "a"
              },
              "byte_size": {
                "type": "number",
                "example": 1234
              }
            }
          }
        ]
      },
      "resultmetadatatoptables": {
        "allOf": [
          {
            "$ref": "#/components/schemas/objecttopspec"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "a"
              },
              "byte_size": {
                "type": "number",
                "example": 1234
              }
            }
          }
        ]
      },
      "resultobjMemoryLimit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/objectspec"
          },
          {
            "type": "object",
            "properties": {
              "memoryLimitStatusCode": {
                "type": "string",
                "example": "OUT-OF-MEMORY"
              }
            }
          }
        ]
      },
      "resultobjresponsetime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/objectspec"
          },
          {
            "type": "object",
            "properties": {
              "timeoutStatusCode": {
                "type": "string",
                "example": "CALC-TIMEOUT"
              },
              "responseTimeSeconds": {
                "type": "number",
                "example": 12.3
              }
            }
          }
        ]
      },
      "resultobjsheet": {
        "type": "object",
        "properties": {
          "sheet": {
            "$ref": "#/components/schemas/resultobjresponsetime"
          },
          "objectCount": {
            "type": "number",
            "example": 1
          },
          "sheetObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resultobjresponsetime"
            }
          }
        }
      },
      "resultsingle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/objectspec"
          },
          {
            "type": "object",
            "properties": {
              "cpuQuotient1": {
                "type": "number",
                "example": 12.3
              }
            }
          }
        ]
      },
      "ScriptLogList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptLogMeta"
            },
            "description": "Array of scriptLogMeta."
          }
        }
      },
      "ScriptLogMeta": {
        "type": "object",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/Log"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time when reload ended."
          },
          "success": {
            "type": "boolean",
            "description": "True if the reload was successful."
          },
          "duration": {
            "type": "integer",
            "format": "int64",
            "description": "Duration of reload (ms)."
          },
          "reloadId": {
            "type": "string",
            "description": "Reload identifier."
          }
        }
      },
      "ScriptMeta": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "Script size."
          },
          "scriptId": {
            "type": "string",
            "description": "Script id."
          },
          "modifierId": {
            "type": "string",
            "description": "User last modifying script version."
          },
          "modifiedTime": {
            "type": "string",
            "description": "Script version last modification time."
          },
          "versionMessage": {
            "type": "string",
            "description": "Description of this script version"
          }
        }
      },
      "ScriptMetaList": {
        "type": "object",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/NavigationLinks"
          },
          "scripts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptMeta"
            },
            "description": "Script versions metadata."
          }
        }
      },
      "ScriptVersion": {
        "type": "object",
        "properties": {
          "script": {
            "type": "string",
            "description": "Script text."
          },
          "versionMessage": {
            "type": "string",
            "description": "Description of this script version"
          }
        }
      },
      "SimplifiedClassifications": {
        "type": "array",
        "items": {
          "enum": [
            "dimension",
            "measure",
            "temporal",
            "geographical"
          ],
          "type": "string"
        }
      },
      "sortedcomparisonfields": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "list": {
                "$ref": "#/components/schemas/comparisonfields"
              },
              "absoluteDiffAsc": {
                "$ref": "#/components/schemas/comparisonfields"
              },
              "relativeDiffAsc": {
                "$ref": "#/components/schemas/comparisonfields"
              },
              "absoluteDiffDesc": {
                "$ref": "#/components/schemas/comparisonfields"
              },
              "dataSourceStatus": {
                "enum": [
                  "full",
                  "none",
                  "baselinemissing",
                  "comparisonmissing"
                ],
                "type": "string",
                "example": "full"
              },
              "relativeDiffDesc": {
                "$ref": "#/components/schemas/comparisonfields"
              }
            }
          }
        ]
      },
      "sortedcomparisonobjresponsetime": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "list": {
                "$ref": "#/components/schemas/comparisonobjresponsetime"
              },
              "absoluteDiffAsc": {
                "$ref": "#/components/schemas/comparisonobjresponsetime"
              },
              "relativeDiffAsc": {
                "$ref": "#/components/schemas/comparisonobjresponsetime"
              },
              "absoluteDiffDesc": {
                "$ref": "#/components/schemas/comparisonobjresponsetime"
              },
              "dataSourceStatus": {
                "enum": [
                  "full",
                  "none",
                  "baselinemissing",
                  "comparisonmissing"
                ],
                "type": "string",
                "example": "full"
              },
              "relativeDiffDesc": {
                "$ref": "#/components/schemas/comparisonobjresponsetime"
              }
            }
          }
        ]
      },
      "sortedcomparisonoobjheavy": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "list": {
                "$ref": "#/components/schemas/comparisonoobjheavy"
              },
              "absoluteDiffAsc": {
                "$ref": "#/components/schemas/comparisonoobjheavy"
              },
              "relativeDiffAsc": {
                "$ref": "#/components/schemas/comparisonoobjheavy"
              },
              "absoluteDiffDesc": {
                "$ref": "#/components/schemas/comparisonoobjheavy"
              },
              "dataSourceStatus": {
                "enum": [
                  "full",
                  "none",
                  "baselinemissing",
                  "comparisonmissing"
                ],
                "type": "string",
                "example": "full"
              },
              "relativeDiffDesc": {
                "$ref": "#/components/schemas/comparisonoobjheavy"
              }
            }
          }
        ]
      },
      "sortedcomparisontables": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "list": {
                "$ref": "#/components/schemas/comparisontables"
              },
              "absoluteDiffAsc": {
                "$ref": "#/components/schemas/comparisontables"
              },
              "relativeDiffAsc": {
                "$ref": "#/components/schemas/comparisontables"
              },
              "absoluteDiffDesc": {
                "$ref": "#/components/schemas/comparisontables"
              },
              "dataSourceStatus": {
                "enum": [
                  "full",
                  "none",
                  "baselinemissing",
                  "comparisonmissing"
                ],
                "type": "string",
                "example": "full"
              },
              "relativeDiffDesc": {
                "$ref": "#/components/schemas/comparisontables"
              }
            }
          }
        ]
      },
      "SymbolFrequency": {
        "type": "object",
        "properties": {
          "Symbol": {
            "$ref": "#/components/schemas/SymbolValue"
          },
          "Frequency": {
            "type": "integer",
            "format": "int64",
            "description": "Frequency of the above symbol in the field"
          }
        }
      },
      "SymbolValue": {
        "type": "object",
        "properties": {
          "Text": {
            "type": "string",
            "description": "String value of the symbol. This parameter is optional and present only if Symbol is a string."
          },
          "Number": {
            "type": "number",
            "format": "double",
            "description": "Numeric value of the symbol. NaN otherwise."
          }
        }
      },
      "TableMetadata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the table."
          },
          "comment": {
            "type": "string",
            "description": "Table comment."
          },
          "is_loose": {
            "type": "boolean",
            "description": "If set to true, the table is loose due to circular connection.\nThe default value is false."
          },
          "byte_size": {
            "type": "integer",
            "format": "int64",
            "description": "Static RAM memory used in bytes."
          },
          "is_system": {
            "type": "boolean",
            "description": "If set to true, the table is a system table.\nThe default value is false."
          },
          "no_of_rows": {
            "type": "integer",
            "format": "int64",
            "description": "Number of rows."
          },
          "is_semantic": {
            "type": "boolean",
            "description": "If set to true, the table is semantic.\nThe default value is false."
          },
          "no_of_fields": {
            "type": "integer",
            "format": "int32",
            "description": "Number of fields."
          },
          "no_of_key_fields": {
            "type": "integer",
            "format": "int32",
            "description": "Number of key fields."
          }
        }
      },
      "TableProfilingData": {
        "type": "object",
        "properties": {
          "NoOfRows": {
            "type": "integer",
            "format": "int64",
            "description": "Number of rows in the table."
          },
          "FieldProfiling": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInTableProfilingData"
            },
            "description": "Field values profiling info"
          }
        }
      },
      "UpdateApp": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/AppUpdateAttributes"
          }
        }
      },
      "UpdateOwner": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "string"
          }
        }
      },
      "UpdateSpace": {
        "type": "object",
        "properties": {
          "spaceId": {
            "type": "string"
          }
        }
      },
      "UsageEnum": {
        "type": "string",
        "oneOf": [
          {
            "title": "ANALYTICS",
            "x-qlik-const": 0
          },
          {
            "title": "DATA_PREPARATION",
            "x-qlik-const": 1
          },
          {
            "title": "DATAFLOW_PREP",
            "x-qlik-const": 2
          },
          {
            "title": "SINGLE_TABLE_PREP",
            "x-qlik-const": 3
          }
        ]
      },
      "UserPrivileges": {
        "type": "string",
        "oneOf": [
          {
            "title": "can_create_app",
            "x-qlik-const": 0
          },
          {
            "title": "can_import_app",
            "x-qlik-const": 1
          },
          {
            "title": "can_create_session_app",
            "x-qlik-const": 2
          }
        ]
      }
    }
  }
}